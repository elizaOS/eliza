---
description: ElizaOS Plugin Architecture
globs: 
alwaysApply: false
---
> You are an expert in the ElizaOS client architecture, focusing on creating plugins that extend the frontend UI with new components, routes, and capabilities.

## Client Plugin Architecture

Client plugins in ElizaOS extend the agent's graphical user interface (GUI), which is typically built with a modern web framework like React or Vue. These plugins allow you to add custom UI components, new pages/routes, and specialized frontend logic that can interact with the agent's backend services.

```mermaid
graph TD
    A[ElizaOS Client App Starts] --> B(Loads Core UI);
    B --> C(Loads Client Plugins);
    C --> D{For Each Plugin};
    D --> E[Register Routes];
    D --> F[Register UI Components];
    D --> G[Register Client-side Services];
    
    subgraph "User Interaction"
        E --> H(User Navigates to Plugin Route);
        F --> I(Plugin Component Renders in UI);
        G --> J(Component uses Service to Fetch Data);
    end

    subgraph "Backend Communication"
        J --> K(Service makes API call);
        K --> L[AgentRuntime HTTP Endpoint];
        L --> K;
    end
```

## Project Structure

A typical client plugin has a structure that mirrors a standard web component library.

```
plugin-my-client-feature/
├── src/
│   ├── index.ts               # Main plugin definition & exports
│   ├── components/            # React/Vue components
│   │   ├── MyCustomPanel.tsx
│   │   └── DataVisualizer.vue
│   ├── routes/                # Page components for new routes
│   │   └── SettingsPage.tsx
│   ├── services/              # Client-side services (e.g., API callers)
│   │   └── dataService.ts
│   ├── hooks/                 # Custom React hooks (if applicable)
│   │   └── useAgentData.ts
│   └── types.ts               # TypeScript types for props, state, etc.
├── package.json
└── ...
```

## Core Implementation Patterns

Client plugins leverage the same core `Plugin` interface but focus on properties that affect the frontend.

### Defining a Client Plugin

The `routes` and `componentTypes` (a generic way to register UI components) are key properties for a client plugin.

```typescript
// src/index.ts
import { type Plugin, type Route } from '@elizaos/core';
import { MyCustomPanel } from './components/MyCustomPanel';
import { SettingsPage } from './routes/SettingsPage';

// ✅ DO: Define public routes for new pages
const myRoutes: Route[] = [
  {
    type: 'GET',
    // The path will be available at /plugins/my-client-plugin/settings
    path: '/settings', 
    // The name is used for the tab in the UI
    name: 'My Plugin Settings',
    // The component to render for this route
    component: SettingsPage,
    public: true, // Must be true to be accessible in the client UI
  }
];

export const myClientPlugin: Plugin = {
  name: 'my-client-plugin',
  description: 'Adds custom UI features to the ElizaOS client.',

  // ✅ DO: Export routes to be registered with the client's router
  routes: myRoutes,

  // ✅ DO: Register named components for dynamic rendering
  componentTypes: [
    {
      name: 'MyCustomPanel', // An identifier for this component
      component: MyCustomPanel, // The actual React/Vue component
    }
  ],
};
```

### Creating a UI Component

Components are standard web components. They can use hooks or services to fetch data from the agent's backend.

```tsx
// src/components/MyCustomPanel.tsx
import React, { useState, useEffect } from 'react';
import { dataService } from '../services/dataService';

// ✅ DO: Create standard UI components
export const MyCustomPanel = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const result = await dataService.fetchMyData();
        setData(result);
      } catch (error) {
        console.error("Failed to fetch data:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h2>My Custom Panel</h2>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
};
```

### Communicating with the Backend

Client-side services should handle all communication with the agent's backend API. This keeps data fetching logic separate from UI components.

```typescript
// src/services/dataService.ts
import axios from 'axios';

// The base URL for the agent's API is typically available globally
// or provided via a context.
const API_BASE_URL = '/api'; 

// ✅ DO: Encapsulate API calls in a dedicated service
class DataService {
  async fetchMyData() {
    try {
      // This corresponds to a backend route, possibly registered by the same plugin
      const response = await axios.get(`${API_BASE_URL}/my-plugin/data`);
      return response.data;
    } catch (error) {
      console.error('API Error in fetchMyData:', error);
      throw error;
    }
  }
}

export const dataService = new DataService();
```

## Best Practices

-   **Backend Routes**: For a client plugin to fetch data, the corresponding backend plugin (or the same plugin) must register an HTTP route using the `routes` property. Ensure the path matches what the client-side service is calling.
-   **Authentication**: If the backend route is not public, the client-side service must handle authentication. This usually involves retrieving a session token from a global context or secure storage (like `localStorage` or a cookie) and including it in the `Authorization` header of the API request.
-   **State Management**: For complex client plugins, use a state management library (like Redux, Zustand, or Pinia) to manage UI state, just as you would in a standard web application.
-   **Styling**: Scope your CSS to your plugin's components to avoid conflicts with the core UI or other plugins. CSS Modules or styled-components are good solutions for this.

## References
- [Core Types (`Plugin`, `Route`)](mdc:packages/core/src/types.ts)
- [Client Application Source](mdc:packages/client/src)
