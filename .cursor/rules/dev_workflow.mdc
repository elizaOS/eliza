---
description: Guide for using Task Master to manage task-driven development workflows
globs: **/*
alwaysApply: true
---
> You are an expert developer on the ElizaOS project, following a structured and test-driven development workflow to ensure high-quality contributions.

# ElizaOS Standard Development Workflow

This document outlines the standard process for building, testing, and contributing to the ElizaOS project. Following this workflow ensures consistency, quality, and adherence to architectural principles.

```mermaid
graph TD
    A[1. Understand Requirement] --> B[2. Plan Implementation];
    B --> C{Bug or Feature?};
    C -->|Bug| D[Identify Root Cause & Affected Files];
    C -->|Feature| E[Create PRD / Design Doc];
    D & E --> F[3. Create Detailed Change Plan];
    F -->e Tests First];
    G --> H[5. Implement Solution];
    H --> I{Tests Passing?};
    I -->|No| H;
    I -->|Yes| J[6. Review for Edge Cases & Finalize];
    J --> K[7.Pull Request];
```

## Step 1: Understand the Requirement
Before writing any code, fully understand the goal.
- **For a Feature**: Read the Product Requirements Document (PRD) or feature ticket. Clarify any ambiguities.
- **For a Bug**: Replicate the bug locally. Understand the exact steps to reproduce it and the expected correct behavior.

## Step 2: Plan the Implementation
This is the most critical phase. Do not start coding without a plan.
- **Research**: Use `grep` and your IDE to find all relevant files, services, actions, and types that will be affected by your change.
- **Impact Analysis**: Think through tive outcomes. How could this change break other parts of the system?
- **Propose a Solution**: Write a detailed implementation plan. This can be a short design doc, a detailed comment in a ticket, or a markdown file. It should oufiles you will change.
    - The new functions/classes/components you will add.
    - The existing cod.
    - The rationale for your approach.
    - Any identified risks.

## Step 3: Project and Feature Scaffolding
Use the CLecessary boilerplate.

- **New Plugin**: If the feature is best encapsulated in a new plugin, use `elizaos create`.
eractively create a new plugin
  elizaos create
  # Select 'Plugin' from the prompt
  ```
- **New Action/Provider/Service** existing plugin, create the new files (e.g., `src/actions/myNewAction.ts`) and add them to the main `Plugin` definition in `src/index.ts`.

## Step 4: Test-Driven Development
Write your tests *before* you write the implementation logic. This clarifies the ensures your code is correct from the start.

- **Unit Tests**: For isolated logic (e.g., a utility function, a single action's data transformation).
` with mocks (`vi.fn()`).
    - Create a `__tests__` directory next to your source file.
    - Run tests with `elizaos test` (it will run vitest).
    - Refer to the [**Unit Testing Guide**](mdc:.aos_v2_testing_unit.mdc).

- **E2E Tests**: For integration logic (e.g., an action that calls a service which then interacts with the database).
    - Add a `TestCase` to the `tes your `plugin/index.ts`.
    - The test will receive a live `IAgentRuntime`.
    - Run tests with `elizaoser to the [**E2E Testing Guide**](mdc:.cursor/rules/elizaos_v2_testing_e2e.mdc).

```bash
# From your plugin or project directory
# This runs both unit and E2E tests defined for the context.
elizaos test

# Filter fo suite to speed up your workflow
elizaos test --name "My New Feature Tests"
```

## Step 5: Implement the Solution
With a plans in place, you can now write the implementation code.

- **Run the Agent**: Use `elizaos start` to run the agent lws for manual testing and verification as you code.
  ```bash
  # From your project or plugin directory
  elizaos start
  ```
- **Iterate**: Write code to make your failing tests ptyle guidelines and architectural patterns. Use `runtime.getSetting` for stract complexity into services, and expose capabilities through actions and providers.
- **Refactor**: Once tests are passing, review your code for clarity, performance, and maintainability.

## Step 6: Final Review and Verification
- **Edge Cases**: Review your code one last time. Have you handled n arrays? Unexpected API responses?
- **Manual Check**: Run through the feature or bug fix manually one last time using `elizaos start`.
- **Full Test Suite**: Run the entire test suite for your package without any filters to ensure you haven't caused any regressions.
  `test
  ```

## Step 7: Commit and Create a Pull Request
- **Commit Message**: Write a clear and descriptive commit messagntional commit standards (e.g., `feat(plugin-x): Add new action for y`, `fix(core): Resolve issue with z`).
- **Pull Request**: Open a pull request against the `main` branch. The description should link to the relevant ticket/issue and summarize the changes made.
- **CI/CD**: The CI/CD pipeline will automatically run the full test suite for the entire project. Ensure it passes.
