name: Release Native App

on:
  release:
    types: [created, edited, published, prereleased]
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_REMOTE_ONLY: true # Enforces remote-only caching
  TURBO_CACHE: remote:rw # allow r/w to remote cache
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Skip binary downloads during install
  YOUTUBE_DL_SKIP_DOWNLOAD: true
  ADBLOCK: true
  PUPPETEER_SKIP_DOWNLOAD: true
  CYPRESS_INSTALL_BINARY: 0
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

jobs:
  build-and-publish:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            target: universal-apple-darwin
            output-dir: src-tauri/target/universal-apple-darwin/release/bundle/dmg
            asset-suffix: _universal.dmg
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output-dir: src-tauri/target/release/bundle
            asset-suffix: _amd64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            output-dir: src-tauri/target/release/bundle/nsis
            asset-suffix: _x64-setup.exe
          - platform: ubuntu-latest # Android builds run on Linux
            target: aarch64-linux-android
            output-dir: src-tauri/gen/android/app/build/outputs/apk/release # Path to the directory containing the APK
            asset-name: app-aarch64-release.apk # Define a specific asset name
            android_artifact_path: packages/app/src-tauri/gen/android/app/build/outputs/apk/release/app-release-unsigned.apk # Path to where Tauri outputs the APK
          - platform: macos-latest # iOS builds must run on macOS
            target: aarch64-apple-ios
            output-dir: src-tauri/gen/apple/DerivedData/App/Build/Products/Release-iphoneos
            asset-name: App-ios-aarch64-release.ipa # Define a specific asset name
            ios_artifact_path: packages/app/src-tauri/gen/apple/DerivedData/App/Build/Products/Release-iphoneos/app.ipa # Path to where Tauri/Xcode outputs the IPA. This path can vary.

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Setup Java
        if: matrix.target == 'aarch64-linux-android' # Only for Android job
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Or any other distribution
          java-version: '17' # Common version for Android dev

      - name: Setup Android SDK/NDK
        if: matrix.target == 'aarch64-linux-android'
        uses: android-actions/setup-android@v3.0.0

      - name: Setup Rust
        run: |
          rustup update stable
          rustup default stable
          rustup target add ${{ matrix.target }}
        shell: bash

      - name: Add additional Android Rust targets
        if: matrix.target == 'aarch64-linux-android'
        run: |
          rustup target add armv7-linux-androideabi # 32-bit ARM
          rustup target add i686-linux-android      # 32-bit x86
          rustup target add x86_64-linux-android    # 64-bit x86
        shell: bash

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './packages/app/src-tauri -> target'
          key: ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev libx11-dev libxdo-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Install Windows dependencies (WebView2)
        if: matrix.platform == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri https://go.microsoft.com/fwlink/p/?LinkId=2124703 -OutFile ./MicrosoftEdgeWebview2Setup.exe
          Start-Process -FilePath ./MicrosoftEdgeWebview2Setup.exe -ArgumentList "/silent", "/install" -Wait
        shell: pwsh

      - name: Setup Apple Development Environment (Certificates & Profiles)
        if: matrix.target == 'aarch64-apple-ios'
        run: |
          echo "Placeholder for installing Apple certificates and provisioning profiles."
          echo "This step will require secrets like APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64, APPLE_CERTIFICATE_PASSWORD, APPLE_PROVISIONING_PROFILE_BASE64."
          # Example (actual commands depend on how secrets are stored and used):
          # echo "${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64 }}" | base64 --decode > certificate.p12
          # security create-keychain -p tempci build.keychain
          # security default-keychain -s build.keychain
          # security unlock-keychain -p tempci build.keychain
          # security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -A
          # security set-key-partition-list -S apple-tool:,apple: -s -k tempci build.keychain
          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # echo "${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/ci_profile.mobileprovision
        shell: bash

      - name: Install dependencies (mac only - for universal builds)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin

      - name: Create .npmrc to skip postinstall scripts
        run: |
          echo "ignore-scripts=true" > .npmrc
        shell: bash

      - name: Install dependencies
        run: bun install --no-postinstall
        env:
          NPM_CONFIG_IGNORE_SCRIPTS: true

      - name: Build packages
        run: bun run build

      - name: Install Tauri CLI
        run: |
          bun install -g @tauri-apps/cli
        shell: bash

      - name: Build the app (macOS Desktop)
        if: matrix.platform == 'macos-latest' && matrix.target == 'universal-apple-darwin'
        run: |
          cd packages/app
          bun run tauri build --target universal-apple-darwin

      - name: Build the app (non-macOS, non-Android, non-iOS)
        if: matrix.platform != 'macos-latest' && matrix.target != 'aarch64-linux-android' && matrix.target != 'aarch64-apple-ios'
        run: |
          cd packages/app
          bun run tauri build
          
      - name: Build the iOS app
        if: matrix.target == 'aarch64-apple-ios'
        run: |
          cd packages/app
          # Ensure correct Apple team ID is set in tauri.conf.json or via env vars for signing
          # export APPLE_DEVELOPMENT_TEAM="YOUR_TEAM_ID" # Example
          bun run tauri ios build --target aarch64-apple-ios --release
        env:
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }} # Example for actual signing
          # APPLE_PROVISIONING_PROFILE_UUID: ${{ secrets.APPLE_PROVISIONING_PROFILE_UUID }}
          # APPLE_DEVELOPMENT_TEAM: ${{ secrets.APPLE_DEVELOPMENT_TEAM }}
          NPM_CONFIG_IGNORE_SCRIPTS: true # Keep this from parent job
        shell: bash

      - name: Build the Android app
        if: matrix.target == 'aarch64-linux-android'
        run: |
          cd packages/app
          # Create a dummy keystore for unsigned release builds if signing is not set up
          if [ ! -f "dummy.keystore" ]; then
            keytool -genkey -v -keystore dummy.keystore -alias dummyalias -keyalg RSA -keysize 2048 -validity 10000 -storepass dummypass -keypass dummypass -dname "CN=Dummy, OU=Dummy, O=Dummy, L=Dummy, S=Dummy, C=Dummy"
          fi
          export TAURI_KEY_PATH=./dummy.keystore
          export TAURI_KEY_ALIAS=dummyalias
          export TAURI_KEY_PASSWORD=dummypass
          
          bun run tauri android build --target aarch64 --release
        env:
          NPM_CONFIG_IGNORE_SCRIPTS: true # Keep this from parent job
        shell: bash

      - name: Upload Desktop build artifacts
        if: matrix.target != 'aarch64-linux-android' && matrix.target != 'aarch64-apple-ios'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-artifacts-${{ matrix.platform }}
          path: packages/app/${{ matrix.output-dir }}
          if-no-files-found: error

      - name: Upload iOS build artifact
        if: matrix.target == 'aarch64-apple-ios'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-artifacts-${{ matrix.platform }}-${{ matrix.target }}
          path: packages/app/${{ matrix.ios_artifact_path }} # Use the specific path
          if-no-files-found: error
          
      - name: Upload Android build artifact
        if: matrix.target == 'aarch64-linux-android'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-artifacts-${{ matrix.platform }}-${{ matrix.target }}
          path: packages/app/${{ matrix.android_artifact_path }} # Use the specific path
          if-no-files-found: error

      # Special handling for Linux since it produces multiple artifacts
      - name: Collect Linux artifacts
        if: matrix.platform == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu' # Only for desktop Linux
        run: |
          mkdir -p ./release-artifacts
          cp packages/app/src-tauri/target/release/bundle/appimage/*.AppImage ./release-artifacts/ || echo "No AppImage found"
          cp packages/app/src-tauri/target/release/bundle/deb/*.deb ./release-artifacts/ || echo "No deb file found"

      - name: Stage Android artifact for release
        if: matrix.target == 'aarch64-linux-android'
        run: |
          mkdir -p ./release-artifacts # Ensure directory exists
          cp packages/app/${{ matrix.android_artifact_path }} ./release-artifacts/${{ matrix.asset-name }}
        shell: bash
        
      - name: Stage iOS artifact for release
        if: matrix.target == 'aarch64-apple-ios'
        run: |
          mkdir -p ./release-artifacts # Ensure directory exists
          cp packages/app/${{ matrix.ios_artifact_path }} ./release-artifacts/${{ matrix.asset-name }}
        shell: bash

      - name: Upload Linux artifacts
        if: matrix.platform == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu' # Only for desktop Linux
        uses: actions/upload-artifact@v4
        with:
          name: linux-specific-artifacts
          path: ./release-artifacts
          if-no-files-found: warn

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            packages/app/${{ matrix.output-dir }}/**/*
            ./release-artifacts/*
          draft: ${{ github.event_name == 'push' }}
          prerelease: ${{ github.event.release.prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
