name: Eliza CLI Tests

# Cancel previous runs for the same PR/branch
concurrency:
  group: cli-tests-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ELIZA_NONINTERACTIVE: true

on:
  push:
    branches:
      - 'main'
      - 'develop'
  pull_request:
    branches:
      - 'main'
      - 'develop'

jobs:
  test:
    # Skip duplicate runs: run on push to main/develop, or on pull_request events only
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && contains(fromJson('["main", "develop"]'), github.ref_name))
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      # Windows-specific setup optimizations
      - name: Configure Windows environment
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Increase virtual memory and optimize for CI
          echo "Configuring Windows environment for CI..."
          
          # Set environment variables for better performance
          echo "BUN_INSTALL_CACHE_DIR=$env:RUNNER_TEMP\bun-cache" >> $env:GITHUB_ENV
          echo "NODE_OPTIONS=--max-old-space-size=6144" >> $env:GITHUB_ENV
          echo "FORCE_COLOR=0" >> $env:GITHUB_ENV
          
          # Create necessary directories
          New-Item -ItemType Directory -Force -Path "$env:RUNNER_TEMP\bun-cache"
          
          # Configure Windows Defender exclusions to speed up CI
          try {
            Add-MpPreference -ExclusionPath "$env:GITHUB_WORKSPACE" -ErrorAction SilentlyContinue
            Add-MpPreference -ExclusionPath "$env:RUNNER_TEMP" -ErrorAction SilentlyContinue
          } catch {
            Write-Host "Could not configure Windows Defender exclusions (this is normal in CI)"
          }

      - name: Set up Bun (with Windows optimizations)
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.15
        env:
          # Windows-specific Bun optimizations
          BUN_INSTALL_BIN_DIR: ${{ runner.os == 'Windows' && format('{0}\bun-bin', runner.temp) || '' }}

      - name: Verify Bun installation (Windows-specific)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          echo "Verifying Bun installation on Windows..."
          
          # Check if bun is accessible
          $bunPath = Get-Command bun -ErrorAction SilentlyContinue
          if ($bunPath) {
            echo "Bun found at: $($bunPath.Source)"
            echo "Bun version:"
            & bun --version
            
            # Test basic bun functionality
            echo "Testing basic Bun functionality..."
            $testResult = & bun --version 2>&1
            if ($LASTEXITCODE -eq 0) {
              echo "✓ Bun is working correctly"
            } else {
              echo "✗ Bun test failed: $testResult"
              exit 1
            }
          } else {
            echo "✗ Bun not found in PATH"
            echo "PATH contents:"
            echo $env:PATH -split ';' | ForEach-Object { echo "  $_" }
            exit 1
          }

      - name: Mention Bun version
        run: bun --version

      - name: Debug Bun Setup
        shell: bash
        run: |
          echo "PATH: $PATH"
          echo "which bun: $(which bun 2>/dev/null || echo 'which not found')"
          echo "command -v bun: $(command -v bun 2>/dev/null || echo 'command not found')"
          if command -v bun &> /dev/null; then
            BUN_PATH=$(which bun 2>/dev/null || command -v bun)
            echo "Bun found at: $BUN_PATH"
            ls -la "$BUN_PATH" 2>/dev/null || echo "Failed to ls bun"
            file "$BUN_PATH" 2>/dev/null || echo "Failed to get bun file info"
          else
            echo "Bun not found in PATH"
          fi

      - name: Install dependencies (with Windows retry logic)
        shell: bash
        run: |
          echo "Installing dependencies..."
          
          # Function to install with retries
          install_with_retry() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Installation attempt $attempt of $max_attempts..."
              
              if bun install --frozen-lockfile --no-progress; then
                echo "✓ Dependencies installed successfully"
                return 0
              else
                echo "✗ Installation attempt $attempt failed"
                
                if [ $attempt -lt $max_attempts ]; then
                  echo "Cleaning up and retrying..."
                  rm -rf node_modules 2>/dev/null || true
                  rm -rf ~/.bun/install/cache 2>/dev/null || true
                  sleep 5
                fi
                
                ((attempt++))
              fi
            done
            
            echo "All installation attempts failed"
            return 1
          }
          
          install_with_retry

      - name: Build all packages
        shell: bash
        run: |
          echo "Building all packages..."
          
          # Set memory limits for Windows
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            export NODE_OPTIONS="--max-old-space-size=6144"
          fi
          
          bun run build

      - name: Verify CLI build artifacts
        shell: bash
        run: |
          echo "Checking CLI build artifacts..."
          echo "CLI dist contents:"
          ls -la packages/cli/dist/ || echo "ERROR: No dist directory"
          echo ""
          echo "CLI templates in dist:"
          ls -la packages/cli/dist/templates/ || echo "ERROR: No templates in dist"
          echo ""
          echo "CLI executable:"
          test -f packages/cli/dist/index.js && echo "✓ CLI index.js exists" || echo "ERROR: CLI index.js missing"

      - name: Clean eliza projects cache
        shell: bash
        run: rm -rf ~/.eliza/projects

      - name: Create .env file for tests
        shell: bash
        run: |
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" > .env
          echo "LOG_LEVEL=info" >> .env

      - name: Download models
        shell: bash
        run: |
          MODEL_DIR="$HOME/.eliza/models"
          mkdir -p "$MODEL_DIR"
          declare -a models=(
            "DeepHermes-3-Llama-3-3B-Preview-q4.gguf https://huggingface.co/NousResearch/DeepHermes-3-Llama-3-3B-Preview-GGUF/resolve/main/DeepHermes-3-Llama-3-3B-Preview-q4.gguf"
            "bge-small-en-v1.5.Q4_K_M.gguf https://huggingface.co/ChristianAzinn/bge-small-en-v1.5-gguf/resolve/main/bge-small-en-v1.5.Q4_K_M.gguf"
          )
          for entry in "${models[@]}"; do
            name="${entry%% *}"
            url="${entry#* }"
            path="$MODEL_DIR/$name"
            if [ ! -f "$path" ]; then
              echo "Downloading $name..."
              start=$(date +%s)
              curl -L -f -sS -o "$path" "$url"
              status=$?
              end=$(date +%s)
              duration=$((end - start))
              if [ $status -eq 0 ]; then
                echo "Downloaded $name in ${duration}s."
              else
                echo "Failed to download $name after ${duration}s."
                exit 1
              fi
            else
              echo "$name already exists, skipping."
            fi
          done

      - name: Install cross-env globally
        run: npm install -g cross-env

      - name: Install BATS on macOS
        if: matrix.os == 'macos-latest'
        run: npm install -g bats

      - name: Run CLI TypeScript tests (macOS optimized)
        if: matrix.os == 'macos-latest'
        timeout-minutes: 15
        run: cross-env NODE_OPTIONS="--max-old-space-size=8192" bun test tests/commands/ --timeout 240000
        working-directory: packages/cli
        env:
          ELIZA_TEST_MODE: true

      - name: Cleanup test processes (macOS)
        if: always() && matrix.os == 'macos-latest'
        shell: bash
        run: |
          pkill -f "bun.*dist/index.js" || true
          lsof -ti:3000 | xargs kill -9 2>/dev/null || true
          lsof -ti:3100 | xargs kill -9 2>/dev/null || true
          echo "Cleanup complete"

      - name: Run CLI TypeScript tests (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        timeout-minutes: 15
        run: cross-env NODE_OPTIONS="--max-old-space-size=4096" bun test tests/commands/ --timeout 240000; EXIT_CODE=$?; bash tests/cleanup-processes.sh; exit $EXIT_CODE
        working-directory: packages/cli
        env:
          ELIZA_TEST_MODE: true

      - name: Cleanup test processes (Ubuntu)
        if: always() && matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          pkill -f "bun.*dist/index.js" || true
          lsof -ti:3000 | xargs kill -9 2>/dev/null || true
          lsof -ti:3100 | xargs kill -9 2>/dev/null || true
          echo "Cleanup complete"

      - name: Run CLI TypeScript tests (Windows - Enhanced)
        if: matrix.os == 'windows-latest'
        timeout-minutes: 20
        shell: powershell
        run: |
          echo "Starting Windows CLI tests with enhanced error handling..."
          
          # Set memory and performance optimizations
          $env:NODE_OPTIONS = "--max-old-space-size=6144 --expose-gc"
          $env:ELIZA_TEST_MODE = "true"
          $env:FORCE_COLOR = "0"
          
          # Pre-cleanup any existing processes
          echo "Pre-cleaning any existing test processes..."
          Get-Process | Where-Object { $_.ProcessName -like "*bun*" -or $_.ProcessName -like "*node*" } | Where-Object { $_.Path -like "*dist*index.js*" } | Stop-Process -Force -ErrorAction SilentlyContinue
          
          # Function to cleanup ports
          function Cleanup-Ports {
            $ports = @(3000, 3100, 3001, 3101)
            foreach ($port in $ports) {
              try {
                $connections = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
                if ($connections) {
                  echo "Cleaning up processes on port $port"
                  $connections | ForEach-Object { 
                    Stop-Process -Id $_.OwningProcess -Force -ErrorAction SilentlyContinue 
                  }
                }
              } catch {
                # Ignore errors during cleanup
              }
            }
          }
          
          Cleanup-Ports
          
          # Change to CLI directory
          Set-Location packages/cli
          
          # Run tests with retry logic
          $maxAttempts = 2
          $attempt = 1
          $success = $false
          
          while ($attempt -le $maxAttempts -and -not $success) {
            echo "Test attempt $attempt of $maxAttempts"
            
            try {
              # Run the actual tests
              $result = & cross-env NODE_OPTIONS="--max-old-space-size=6144" bun test tests/commands/ --timeout 300000 2>&1
              
              if ($LASTEXITCODE -eq 0) {
                echo "✓ Tests passed successfully"
                $success = $true
              } else {
                echo "✗ Tests failed with exit code: $LASTEXITCODE"
                echo "Test output: $result"
                
                if ($attempt -lt $maxAttempts) {
                  echo "Cleaning up for retry..."
                  Cleanup-Ports
                  Start-Sleep -Seconds 10
                }
              }
            } catch {
              echo "✗ Test execution failed: $($_.Exception.Message)"
              
              if ($attempt -lt $maxAttempts) {
                echo "Cleaning up for retry..."
                Cleanup-Ports
                Start-Sleep -Seconds 10
              }
            }
            
            $attempt++
          }
          
          # Final cleanup
          Cleanup-Ports
          
          if (-not $success) {
            echo "All test attempts failed"
            exit 1
          }
        working-directory: .

      - name: Cleanup test processes (Windows - Enhanced)
        if: always() && matrix.os == 'windows-latest'
        shell: powershell
        run: |
          echo "Starting comprehensive Windows cleanup..."
          
          # Kill processes by name and path patterns
          $processPatterns = @(
            "*bun*",
            "*node*"
          )
          
          foreach ($pattern in $processPatterns) {
            try {
              $processes = Get-Process | Where-Object { 
                $_.ProcessName -like $pattern -and 
                ($_.Path -like "*dist*index.js*" -or $_.Path -like "*eliza*" -or $_.CommandLine -like "*test*")
              }
              
              if ($processes) {
                echo "Killing $($processes.Count) processes matching pattern: $pattern"
                $processes | Stop-Process -Force -ErrorAction SilentlyContinue
              }
            } catch {
              echo "Error cleaning up processes for pattern $pattern : $($_.Exception.Message)"
            }
          }
          
          # Clean up specific ports
          $ports = @(3000, 3100, 3001, 3101, 8080, 8081)
          foreach ($port in $ports) {
            try {
              $connections = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
              if ($connections) {
                echo "Cleaning up $($connections.Count) connections on port $port"
                $connections | ForEach-Object { 
                  try {
                    Stop-Process -Id $_.OwningProcess -Force -ErrorAction SilentlyContinue
                  } catch {
                    # Ignore individual process cleanup errors
                  }
                }
              }
            } catch {
              # Port might not be in use, which is fine
            }
          }
          
          # Force garbage collection
          [System.GC]::Collect()
          [System.GC]::WaitForPendingFinalizers()
          
          # Wait a moment for cleanup to complete
          Start-Sleep -Seconds 2
          
          echo "Windows cleanup complete"

      # Add a final verification step for Windows
      - name: Verify Windows cleanup
        if: always() && matrix.os == 'windows-latest'
        shell: powershell
        run: |
          echo "Verifying cleanup was successful..."
          
          # Check for any remaining test processes
          $remainingProcesses = Get-Process | Where-Object { 
            ($_.ProcessName -like "*bun*" -or $_.ProcessName -like "*node*") -and 
            ($_.Path -like "*dist*index.js*" -or $_.Path -like "*eliza*")
          }
          
          if ($remainingProcesses) {
            echo "Warning: Found $($remainingProcesses.Count) remaining processes:"
            $remainingProcesses | Format-Table ProcessName, Id, Path -AutoSize
          } else {
            echo "✓ No remaining test processes found"
          }
          
          # Check for any remaining port usage
          $testPorts = @(3000, 3100)
          foreach ($port in $testPorts) {
            $connections = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
            if ($connections) {
              echo "Warning: Port $port still has $($connections.Count) active connections"
            }
          }
          
          echo "Verification complete"
