import { getSchemaFactory } from './factory';
import { messageServerTable } from './messageServer'; // This should now be factory-aware
import { sql } from 'drizzle-orm'; // Keep sql import if used for defaults

const factory = getSchemaFactory();

export const channelTable = (factory.table as any)('channels', {
  id: factory.text('id').primaryKey(), // UUID stored as text, primary key typically doesn't need explicit default if generated by app
  messageServerId: factory
    .text('server_id')
    .notNull()
    // The type of messageServerTable.id should now be correctly inferred by the factory context
    .references(() => messageServerTable.id, { onDelete: 'cascade' }),
  name: factory.text('name').notNull(),
  type: factory.text('type').notNull(), // Store ChannelType enum values as text
  sourceType: factory.text('source_type'),
  sourceId: factory.text('source_id'),
  topic: factory.text('topic'),
  metadata: factory.json('metadata'), // JSON stored as TEXT for Pglite
  createdAt: factory
    .timestamp('created_at', { mode: 'date' })
    .default(factory.defaultTimestamp()) // Use factory helper for default timestamp
    .notNull(),
  updatedAt: factory
    .timestamp('updated_at', { mode: 'date' })
    .default(factory.defaultTimestamp())
    .notNull(),
});

// Relations are defined outside the table definition and should be cross-compatible with Drizzle
// No changes needed for relations typically unless they involve dialect-specific features not handled by Drizzle's core relation builders.
