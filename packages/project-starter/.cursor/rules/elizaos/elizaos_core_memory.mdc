---
description: ElizaOS Memory System and State
globs: 
alwaysApply: false
---
> You are an expert in ElizaOS v2, TypeScript, memory management, and AI agent development. You focus on creating efficient memory systems, optimized state composition, and robust knowledge integration with performance optimization.

## Memory & State Architecture

In ElizaOS, memory and state management are not handled by separate manager classes but are core responsibilities of the `AgentRuntime`. The runtime provides a direct and unified API for interacting with the agent's memory, which is persisted through an `IDatabaseAdapter`.

### Core Memory Operations via `AgentRuntime`

All interactions with the agent's memory (creating facts, retrieving history, semantic search) are performed through methods on the `IAgentRuntime` instance.

```typescript
// ✅ DO: Use the AgentRuntime instance for all memory operations.
// Reference: packages/core/src/runtime.ts
// Reference: packages/core/src/types.ts

import {
  type IAgentRuntime,
  type Memory,
  type Entity,
  type Relationship,
  type CreateMemory,
  asUUID,
} from '@elizaos/core';
import { logger } from '@elizaos/core';

// --- Example: Working with Memories ---
async function manageMemories(runtime: IAgentRuntime) {
  // 1. Create a new memory (e.g., a message)
  const newMemory: CreateMemory = {
    agentId: runtime.agentId,
    entityId: asUUID('some-user-uuid'),
    roomId: asUUID('some-room-uuid'),
    content: { text: "The user is interested in learning about ElizaOS plugins." },
    // The runtime will automatically generate embeddings if not provided
  };
  const memoryId = await runtime.createMemory(newMemory);
  logger.info(`New memory created with ID: ${memoryId}`);

  // 2. Retrieve recent memories from a room
  const recentMemories = await runtime.getMemories({
    roomId: asUUID('some-room-uuid'),
    count: 10,
  });
  logger.info(`Retrieved ${recentMemories.length} recent memories.`);

  // 3. Perform a semantic search
  const searchResults = await runtime.searchMemories({
    query: "What are ElizaOS plugins?",
    match_threshold: 0.75,
    count: 5,
  });
  logger.info(`Found ${searchResults.length} relevant memories from search.`);
}

// ❌ DON'T: Attempt to instantiate a separate MemoryManager or access the DB directly.
// The runtime abstracts away the database implementation and provides a consistent API.
function badMemoryAccess(runtime: IAgentRuntime) {
  // const memoryManager = new MemoryManager(runtime); // WRONG: This class doesn't exist.
  // runtime.database.query(...); // WRONG: Bypasses runtime logic and optimizations.
}
```

### Working with Entities and Relationships

The `AgentRuntime` also provides methods to manage `Entities` (e.g., users, channels, concepts) and the `Relationships` between them. This forms the agent's knowledge graph.

```typescript
// ✅ DO: Use the AgentRuntime to manage the agent's knowledge graph.
// Reference: packages/core/src/types.ts

async function manageKnowledgeGraph(runtime: IAgentRuntime) {
  // 1. Create or update an entity
  const userEntity: Partial<Entity> = {
    id: asUUID('user-jane-doe'),
    type: 'person',
    name: 'Jane Doe',
    data: {
      username: 'janedoe',
      interests: ['AI', 'TypeScript'],
    }
  };
  await runtime.createEntity(userEntity.id, userEntity);
  logger.info(`Created/updated entity for ${userEntity.name}`);

  const pluginEntity: Partial<Entity> = {
    id: asUUID('concept-elizaos-plugin'),
    type: 'concept',
    name: 'ElizaOS Plugin',
    data: {
      description: 'A module that extends an agent\'s capabilities.'
    }
  };
  await runtime.createEntity(pluginEntity.id, pluginEntity);

  // 2. Create a relationship between entities
  const relationship: Omit<Relationship, 'id'> = {
    source: userEntity.id,
    target: pluginEntity.id,
    type: 'INTERESTED_IN',
    weight: 0.9, // Represents the strength of the relationship
  };
  await runtime.createRelationship(relationship);
  logger.info(`Created relationship: ${userEntity.name} -> INTERESTED_IN -> ${pluginEntity.name}`);

  // 3. Retrieve entities and their relationships
  const janeDoe = await runtime.getEntity(userEntity.id);
  const relatedEntities = await runtime.getRelatedEntities(userEntity.id);

  if (janeDoe) {
    logger.info('Retrieved Entity:', janeDoe);
  }
  if (relatedEntities.length > 0) {
    logger.info('Found related entities:', relatedEntities);
  }
}
```

### State Composition

State composition is the process of gathering all relevant context for the LLM to make a decision. This is handled by Providers, which are orchestrated by the `AgentRuntime`. The `composeState` method is an internal runtime function used in this process. You typically influence state by creating good `Providers`, not by calling `composeState` directly.

```typescript
// ✅ DO: Create effective providers to influence the agent's state.
// Providers are the correct way to inject context into the state object.

import { type Provider } from '@elizaos/core';

export const userProfileProvider: Provider = {
  name: 'userProfile',
  description: 'Provides information about the user interacting with the agent.',
  get: async (runtime, message, state) => {
    // The runtime is used to fetch the relevant entity data
    const userEntity = await runtime.getEntity(message.entityId);
    if (!userEntity) {
      return { text: "The user's profile is not available." };
    }
    const profileText = `The user's name is ${userEntity.name}. Interests include: ${userEntity.data?.interests?.join(', ') || 'not specified'}.`;
    return {
      text: profileText,
      data: { user: userEntity.data } // Provide structured data for other components
    };
  }
};

// ❌ DON'T: Try to call or override `composeState` directly.
// This is an internal runtime mechanism.
// Extend the agent's context by registering well-defined Providers via plugins.
```

## Best Practices

*   **Unified API**: Always use the `IAgentRuntime` instance as the single entry point for all memory and knowledge graph operations.
*   **Abstracted Storage**: Write your components to be agnostic of the underlying database. The `IDatabaseAdapter` and the runtime methods provide a consistent interface whether you're using PGLite or a full Postgres server.
*   **Structured Data**: Use `Entities` and `Relationships` to build a rich, queryable knowledge graph for your agent, rather than just storing unstructured text in `Memories`.
*   **Semantic Search**: Leverage `runtime.searchMemories()` with a text query to find the most relevant information, rather than fetching large numbers of recent memories and filtering them manually.
*   **Stateless Components**: Ensure your Actions, Providers, and Evaluators are stateless. When they need to interact with memory, they should do so through the `runtime` instance passed to them.
