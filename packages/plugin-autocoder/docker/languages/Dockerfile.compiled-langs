# Compiled languages container (C, C++, Rust, Go)
FROM plugin-autocoder-base:latest

# Switch to root for installations
USER root

# Install C/C++ toolchains and libraries
RUN apt-get update && apt-get install -y \
    # C/C++ Compilers
    gcc \
    g++ \
    clang \
    clang++ \
    clang-format \
    clang-tidy \
    llvm \
    lldb \
    # Build systems
    make \
    cmake \
    ninja-build \
    meson \
    # C/C++ Libraries
    libboost-all-dev \
    libgtest-dev \
    libgmock-dev \
    libbenchmark-dev \
    libfmt-dev \
    libspdlog-dev \
    libeigen3-dev \
    libopencv-dev \
    # Static analysis
    cppcheck \
    cpplint \
    iwyu \
    # Documentation
    doxygen \
    graphviz \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
ENV RUSTUP_HOME=/opt/rust
ENV CARGO_HOME=/opt/rust
ENV PATH=/opt/rust/bin:$PATH

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable && \
    rustup component add rustfmt clippy rust-src rust-analyzer && \
    rustup toolchain install nightly && \
    cargo install cargo-edit cargo-watch cargo-nextest cargo-audit cargo-tarpaulin sccache

# Install Go
ENV GO_VERSION=1.21.5
ENV GOPATH=/opt/go
ENV PATH=/usr/local/go/bin:/opt/go/bin:$PATH

RUN wget -q https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz && \
    rm go${GO_VERSION}.linux-amd64.tar.gz && \
    go install golang.org/x/tools/gopls@latest && \
    go install github.com/go-delve/delve/cmd/dlv@latest && \
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest && \
    go install golang.org/x/tools/cmd/goimports@latest && \
    go install github.com/fatih/gomodifytags@latest && \
    go install github.com/cweill/gotests/gotests@latest

# Install additional build tools
RUN apt-get update && apt-get install -y \
    # Build acceleration
    ccache \
    distcc \
    # Package managers
    conan \
    vcpkg \
    # Testing frameworks
    catch2 \
    # Profiling
    linux-perf \
    google-perftools \
    && rm -rf /var/lib/apt/lists/*

# Set up ccache
RUN mkdir -p /cache/ccache && \
    ccache --set-config=cache_dir=/cache/ccache && \
    ccache --set-config=max_size=5G

# Create sample build configurations
RUN mkdir -p /configs/cmake /configs/rust /configs/go && \
    echo 'cmake_minimum_required(VERSION 3.16)\nproject(SWEBench)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)' > /configs/cmake/CMakeLists.txt.template && \
    echo '[package]\nname = "swebench"\nversion = "0.1.0"\nedition = "2021"\n\n[dependencies]' > /configs/rust/Cargo.toml.template && \
    echo 'module swebench\n\ngo 1.21\n\nrequire ()' > /configs/go/go.mod.template

# Install bridge client dependencies
COPY --chown=swebench:swebench docker/scripts/install-bridge.sh /tmp/install-bridge.sh
RUN chmod +x /tmp/install-bridge.sh && /tmp/install-bridge.sh compiled

# Copy language-specific scripts
COPY --chown=swebench:swebench docker/scripts/compiled-langs-setup.sh /usr/local/bin/setup-environment
RUN chmod +x /usr/local/bin/setup-environment

# Environment variables
ENV CC=gcc
ENV CXX=g++
ENV RUSTFLAGS="-C target-cpu=native"
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=amd64

# Fix permissions
RUN chown -R swebench:swebench /opt/rust /opt/go /cache/ccache

# Switch back to swebench user
USER swebench

# Expose bridge port
EXPOSE 9999

# Entry point
ENTRYPOINT ["/usr/local/bin/setup-environment"]
CMD ["node", "/bridge/bridge-client.js"] 