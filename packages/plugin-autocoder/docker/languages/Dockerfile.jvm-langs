# JVM languages container (Java)
FROM plugin-autocoder-base:latest

# Switch to root for installations
USER root

# Install OpenJDK versions
RUN apt-get update && apt-get install -y \
    openjdk-8-jdk \
    openjdk-11-jdk \
    openjdk-17-jdk \
    openjdk-21-jdk \
    && rm -rf /var/lib/apt/lists/*

# Set default Java version to 17 (LTS)
RUN update-java-alternatives -s java-1.17.0-openjdk-amd64

# Install Maven
ENV MAVEN_VERSION=3.9.6
ENV MAVEN_HOME=/opt/maven
ENV PATH=${MAVEN_HOME}/bin:${PATH}

RUN wget -q https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    tar -xzf apache-maven-${MAVEN_VERSION}-bin.tar.gz -C /opt && \
    ln -s /opt/apache-maven-${MAVEN_VERSION} /opt/maven && \
    rm apache-maven-${MAVEN_VERSION}-bin.tar.gz

# Install Gradle
ENV GRADLE_VERSION=8.5
ENV GRADLE_HOME=/opt/gradle
ENV PATH=${GRADLE_HOME}/bin:${PATH}

RUN wget -q https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip && \
    unzip -q gradle-${GRADLE_VERSION}-bin.zip -d /opt && \
    ln -s /opt/gradle-${GRADLE_VERSION} /opt/gradle && \
    rm gradle-${GRADLE_VERSION}-bin.zip

# Install Ant
ENV ANT_VERSION=1.10.14
ENV ANT_HOME=/opt/ant
ENV PATH=${ANT_HOME}/bin:${PATH}

RUN wget -q https://archive.apache.org/dist/ant/binaries/apache-ant-${ANT_VERSION}-bin.tar.gz && \
    tar -xzf apache-ant-${ANT_VERSION}-bin.tar.gz -C /opt && \
    ln -s /opt/apache-ant-${ANT_VERSION} /opt/ant && \
    rm apache-ant-${ANT_VERSION}-bin.tar.gz

# Install Java development tools
RUN apt-get update && apt-get install -y \
    # IDE support tools
    maven-debian-helper \
    ivy \
    # Testing frameworks (via package manager)
    junit4 \
    testng \
    # Code quality tools
    checkstyle \
    && rm -rf /var/lib/apt/lists/*

# Download commonly used Java libraries
RUN mkdir -p /opt/java-libs && cd /opt/java-libs && \
    # JUnit 5
    wget -q https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.10.1/junit-platform-console-standalone-1.10.1.jar && \
    # Mockito
    wget -q https://repo1.maven.org/maven2/org/mockito/mockito-core/5.8.0/mockito-core-5.8.0.jar && \
    # AssertJ
    wget -q https://repo1.maven.org/maven2/org/assertj/assertj-core/3.25.1/assertj-core-3.25.1.jar && \
    # Lombok
    wget -q https://repo1.maven.org/maven2/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar && \
    # SLF4J
    wget -q https://repo1.maven.org/maven2/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar && \
    wget -q https://repo1.maven.org/maven2/org/slf4j/slf4j-simple/2.0.9/slf4j-simple-2.0.9.jar

# Create Maven settings with common repositories
RUN mkdir -p /home/swebench/.m2 && \
    echo '<?xml version="1.0" encoding="UTF-8"?>\n<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"\n          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0\n                              http://maven.apache.org/xsd/settings-1.0.0.xsd">\n  <mirrors>\n    <mirror>\n      <id>central</id>\n      <name>Maven Central</name>\n      <url>https://repo1.maven.org/maven2/</url>\n      <mirrorOf>*</mirrorOf>\n    </mirror>\n  </mirrors>\n</settings>' > /home/swebench/.m2/settings.xml

# Create Gradle init script for common configurations
RUN mkdir -p /home/swebench/.gradle/init.d && \
    echo 'allprojects {\n    repositories {\n        mavenCentral()\n        google()\n        gradlePluginPortal()\n    }\n}' > /home/swebench/.gradle/init.d/repositories.gradle

# Create sample build configurations
RUN mkdir -p /configs/maven /configs/gradle && \
    echo '<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0\n                             http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.swebench</groupId>\n    <artifactId>project</artifactId>\n    <version>1.0.0</version>\n    <properties>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.target>17</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n</project>' > /configs/maven/pom.xml.template && \
    echo 'plugins {\n    id "java"\n    id "application"\n}\n\ngroup = "com.swebench"\nversion = "1.0.0"\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_17\n}\n\nrepositories {\n    mavenCentral()\n}' > /configs/gradle/build.gradle.template

# Install bridge client dependencies
COPY --chown=swebench:swebench docker/scripts/install-bridge.sh /tmp/install-bridge.sh
RUN chmod +x /tmp/install-bridge.sh && /tmp/install-bridge.sh jvm

# Copy language-specific scripts
COPY --chown=swebench:swebench docker/scripts/jvm-langs-setup.sh /usr/local/bin/setup-environment
RUN chmod +x /usr/local/bin/setup-environment

# Environment variables
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=${JAVA_HOME}/bin:${PATH}
ENV MAVEN_OPTS="-Xmx2048m -XX:+UseG1GC"
ENV GRADLE_OPTS="-Xmx2048m -XX:+UseG1GC"

# Fix permissions
RUN chown -R swebench:swebench /home/swebench/.m2 /home/swebench/.gradle /opt/java-libs

# Switch back to swebench user
USER swebench

# Expose bridge port
EXPOSE 9999

# Entry point
ENTRYPOINT ["/usr/local/bin/setup-environment"]
CMD ["node", "/bridge/bridge-client.js"] 