import type { Scenario, ScenarioSuite } from '../types.js';
import { v4 as uuidv4 } from 'uuid';

/**
 * AutoCoder Artifact Management scenarios
 * Tests artifact storage, retrieval, versioning, and project organization
 */

export const autocoderArtifactStorage: Scenario = {
  id: 'autocoder-artifact-storage',
  name: 'AutoCoder Artifact Storage and Retrieval',
  description: 'Test AutoCoder ability to properly store and organize code artifacts',
  category: 'autocoder-artifacts',
  tags: ['autocoder', 'artifacts', 'storage', 'organization', 'versioning'],
  
  actors: [
    {
      id: uuidv4(),
      name: 'AutoCoder',
      role: 'subject',
      plugins: ['@elizaos/plugin-sql', '@elizaos/plugin-planning'],
      personality: {
        traits: ['organized', 'methodical', 'detail-oriented'],
        systemPrompt: 'You are an AutoCoder agent focused on creating well-organized, properly documented code artifacts.',
      },
    },
    {
      id: uuidv4(),
      name: 'ProjectManager',
      role: 'observer',
    },
  ],

  setup: {
    roomType: 'dm',
    context: 'AutoCoder is creating multiple related code artifacts for a project',
    initialMessages: [
      {
        id: uuidv4(),
        content: `Create a complete TypeScript utility library with the following components:

1. **String Utilities**
   - capitalize function
   - kebab-case converter
   - email validator
   - URL slug generator

2. **Array Utilities**
   - unique array filter
   - array chunking function
   - array flatten function
   - array groupBy function

3. **Date Utilities**
   - date formatter
   - relative time calculator
   - business days calculator

4. **Type Definitions**
   - Common interfaces
   - Utility types
   - Constants

5. **Tests**
   - Comprehensive test suite for all utilities
   - Test data and fixtures

6. **Documentation**
   - README with usage examples
   - API documentation
   - Installation guide

Please create all these as separate, well-organized artifacts with proper metadata and tags.`,
        sender: 'ProjectManager',
        timestamp: Date.now(),
      },
    ],
  },

  execution: {
    maxDuration: 600000, // 10 minutes
    maxSteps: 50,
    timeout: 120000,
    realApiCallsExpected: true,
  },

  verification: {
    rules: [
      {
        id: 'multiple-artifacts-created',
        type: 'storage-verification',
        description: 'Verify multiple artifacts were created and stored',
        config: {
          expectedValue: 'multiple code artifacts stored',
          category: 'artifact-storage',
          minMessages: 8, // At least 8 separate artifacts
        },
      },
      {
        id: 'proper-artifact-types',
        type: 'llm-evaluation',
        description: 'Verify artifacts have proper types and organization',
        config: {
          successCriteria: [
            'Code artifacts marked as type "code"',
            'Documentation artifacts marked as type "documentation"',
            'Test artifacts marked as type "test"',
            'Proper file names and paths used',
          ],
          requiredKeywords: ['type', 'code', 'documentation', 'test', 'path'],
          llmEnhancement: true,
        },
      },
      {
        id: 'comprehensive-metadata',
        type: 'llm-evaluation',
        description: 'Verify artifacts have comprehensive metadata',
        config: {
          successCriteria: [
            'Each artifact includes descriptive metadata',
            'Proper language detection for code files',
            'Meaningful tags for categorization',
            'Generated by information included',
          ],
          requiredKeywords: ['metadata', 'tags', 'language', 'description'],
          llmEnhancement: true,
        },
      },
      {
        id: 'project-organization',
        type: 'llm-evaluation',
        description: 'Verify proper project organization',
        config: {
          successCriteria: [
            'Related artifacts grouped logically',
            'Clear separation between utilities, tests, and docs',
            'Consistent naming conventions used',
            'Proper module structure suggested',
          ],
          requiredKeywords: ['organization', 'structure', 'module', 'separation'],
          llmEnhancement: true,
        },
      },
      {
        id: 'artifact-completeness',
        type: 'llm-evaluation',
        description: 'Verify all requested components were created',
        config: {
          successCriteria: [
            'String utilities implemented',
            'Array utilities implemented',
            'Date utilities implemented',
            'Type definitions provided',
            'Tests created for utilities',
            'Documentation provided',
          ],
          requiredKeywords: ['string', 'array', 'date', 'types', 'test', 'documentation'],
          llmEnhancement: true,
        },
      },
    ],
  },

  benchmarks: {
    maxDuration: 600000,
    maxSteps: 50,
    targetAccuracy: 0.85,
    customMetrics: [
      {
        name: 'artifact_organization_quality',
        threshold: 0.9,
        target: 'well-organized artifact structure',
      },
      {
        name: 'metadata_completeness',
        threshold: 0.85,
        target: 'comprehensive artifact metadata',
      },
      {
        name: 'project_completeness',
        threshold: 0.8,
        target: 'all requested components delivered',
      },
    ],
  },
};

export const autocoderArtifactVersioning: Scenario = {
  id: 'autocoder-artifact-versioning',
  name: 'AutoCoder Artifact Versioning and Updates',
  description: 'Test AutoCoder ability to handle artifact updates and versioning',
  category: 'autocoder-artifacts',
  tags: ['autocoder', 'artifacts', 'versioning', 'updates', 'iteration'],
  
  actors: [
    {
      id: uuidv4(),
      name: 'AutoCoder',
      role: 'subject',
      plugins: ['@elizaos/plugin-sql', '@elizaos/plugin-planning'],
    },
    {
      id: uuidv4(),
      name: 'Developer',
      role: 'observer',
    },
  ],

  setup: {
    roomType: 'dm',
    context: 'AutoCoder is iterating on a previously created function based on feedback',
    initialMessages: [
      {
        id: uuidv4(),
        content: 'Create a simple user authentication function that takes email and password and returns a JWT token.',
        sender: 'Developer',
        timestamp: Date.now(),
      },
    ],
  },

  execution: {
    maxDuration: 480000, // 8 minutes
    maxSteps: 40,
    timeout: 90000,
    realApiCallsExpected: true,
    stopConditions: [
      {
        type: 'message_count',
        value: 6, // Wait for initial creation and then provide feedback
        description: 'Wait for initial artifact creation',
      },
    ],
  },

  verification: {
    rules: [
      {
        id: 'initial-artifact-created',
        type: 'storage-verification',
        description: 'Verify initial artifact was created',
        config: {
          expectedValue: 'initial authentication function artifact',
          category: 'artifact-storage',
        },
      },
      {
        id: 'feedback-incorporation',
        type: 'llm-evaluation',
        description: 'Verify feedback was incorporated into updates',
        config: {
          successCriteria: [
            'Responded to feedback appropriately',
            'Made requested modifications',
            'Maintained code quality during updates',
            'Explained changes made',
          ],
          requiredKeywords: ['updated', 'modified', 'feedback', 'improved'],
          llmEnhancement: true,
        },
      },
      {
        id: 'version-management',
        type: 'llm-evaluation',
        description: 'Verify proper version management approach',
        config: {
          successCriteria: [
            'Created updated versions of artifacts',
            'Maintained backward compatibility where possible',
            'Documented changes between versions',
            'Clear version identification',
          ],
          requiredKeywords: ['version', 'updated', 'changes', 'compatibility'],
          llmEnhancement: true,
        },
      },
      {
        id: 'iterative-improvement',
        type: 'llm-evaluation',
        description: 'Verify iterative improvement process',
        config: {
          successCriteria: [
            'Each iteration improved upon the previous',
            'Addressed specific concerns raised',
            'Maintained overall code quality',
            'Provided clear rationale for changes',
          ],
          requiredKeywords: ['improvement', 'iteration', 'addressed', 'quality'],
          llmEnhancement: true,
        },
      },
    ],
  },

  benchmarks: {
    maxDuration: 480000,
    maxSteps: 40,
    targetAccuracy: 0.8,
    customMetrics: [
      {
        name: 'feedback_responsiveness',
        threshold: 0.9,
        target: 'responsive to feedback and iteration requests',
      },
      {
        name: 'version_management_quality',
        threshold: 0.8,
        target: 'proper handling of artifact versions',
      },
      {
        name: 'iterative_improvement_effectiveness',
        threshold: 0.8,
        target: 'effective iterative improvement process',
      },
    ],
  },
};

export const autocoderArtifactSearch: Scenario = {
  id: 'autocoder-artifact-search',
  name: 'AutoCoder Artifact Search and Reuse',
  description: 'Test AutoCoder ability to search existing artifacts and reuse components',
  category: 'autocoder-artifacts',
  tags: ['autocoder', 'artifacts', 'search', 'reuse', 'discovery'],
  
  actors: [
    {
      id: uuidv4(),
      name: 'AutoCoder',
      role: 'subject',
      plugins: ['@elizaos/plugin-sql', '@elizaos/plugin-planning'],
    },
    {
      id: uuidv4(),
      name: 'LeadDeveloper',
      role: 'observer',
    },
  ],

  setup: {
    roomType: 'dm',
    context: 'AutoCoder is building on previous work by searching and reusing existing artifacts',
    initialMessages: [
      {
        id: uuidv4(),
        content: `I need to create a complete user management system. Before writing new code, please:

1. Search existing artifacts for any related components
2. Identify what can be reused vs what needs to be created new
3. Create a plan that leverages existing work
4. Build the remaining components needed

The system should include:
- User registration
- User authentication  
- User profile management
- Password reset functionality
- Email verification

Please check what we already have and build upon it efficiently.`,
        sender: 'LeadDeveloper',
        timestamp: Date.now(),
      },
    ],
  },

  execution: {
    maxDuration: 420000, // 7 minutes
    maxSteps: 35,
    timeout: 90000,
    realApiCallsExpected: true,
  },

  verification: {
    rules: [
      {
        id: 'artifact-search-performed',
        type: 'llm-evaluation',
        description: 'Verify artifact search was performed',
        config: {
          successCriteria: [
            'Searched existing artifacts for relevant components',
            'Identified reusable existing code',
            'Assessed what was missing and needed',
            'Created efficient reuse plan',
          ],
          requiredKeywords: ['search', 'existing', 'reuse', 'found', 'artifacts'],
          llmEnhancement: true,
        },
      },
      {
        id: 'reuse-strategy',
        type: 'llm-evaluation',
        description: 'Verify effective reuse strategy',
        config: {
          successCriteria: [
            'Identified specific artifacts to reuse',
            'Explained how existing code would be integrated',
            'Minimized duplicate development effort',
            'Built upon existing foundations',
          ],
          requiredKeywords: ['reuse', 'integrate', 'build upon', 'existing'],
          llmEnhancement: true,
        },
      },
      {
        id: 'gap-analysis',
        type: 'llm-evaluation',
        description: 'Verify proper gap analysis',
        config: {
          successCriteria: [
            'Identified what was missing from existing artifacts',
            'Prioritized new development needs',
            'Created plan for filling gaps',
            'Explained rationale for new components',
          ],
          requiredKeywords: ['gap', 'missing', 'needed', 'plan', 'new'],
          llmEnhancement: true,
        },
      },
      {
        id: 'efficient-development',
        type: 'llm-evaluation',
        description: 'Verify efficient development approach',
        config: {
          successCriteria: [
            'Avoided recreating existing functionality',
            'Built complementary components efficiently',
            'Maintained consistency with existing artifacts',
            'Created cohesive overall system',
          ],
          requiredKeywords: ['efficient', 'complement', 'consistent', 'cohesive'],
          llmEnhancement: true,
        },
      },
    ],
  },

  benchmarks: {
    maxDuration: 420000,
    maxSteps: 35,
    targetAccuracy: 0.8,
    customMetrics: [
      {
        name: 'artifact_discovery_effectiveness',
        threshold: 0.85,
        target: 'effective discovery and analysis of existing artifacts',
      },
      {
        name: 'reuse_efficiency',
        threshold: 0.8,
        target: 'efficient reuse of existing components',
      },
      {
        name: 'development_efficiency',
        threshold: 0.8,
        target: 'avoided duplicate work through smart reuse',
      },
    ],
  },
};

export const autocoderArtifactManagementSuite: ScenarioSuite = {
  name: 'AutoCoder Artifact Management Suite',
  description: 'Comprehensive tests for artifact storage, versioning, and reuse capabilities',
  scenarios: [
    autocoderArtifactStorage,
    autocoderArtifactVersioning,
    autocoderArtifactSearch,
  ],
};