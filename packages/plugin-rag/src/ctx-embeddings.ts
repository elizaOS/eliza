/**
 * Prompt template for generating a contextual summary for a text chunk.
 * Inspired by the Anthropic cookbook guide on contextual embeddings.
 * https://github.com/anthropics/anthropic-cookbook/blob/main/skills/contextual-embeddings/guide.ipynb
 */
export const CONTEXTUAL_CHUNK_PROMPT_TEMPLATE = `
<document>
{doc_content}
</document>

Here is a specific chunk from the document above:
<chunk>
{chunk_content}
</chunk>

Your task is to re-write the content of the <chunk> into a concise, self-contained summary. This summary should capture the core information of the chunk and its significance within the context of the entire <document>. The goal is for this summary to be used for search retrieval, so it must effectively represent the chunk's content on its own.

Please provide only the re-written summary of the chunk. Do not include any conversational preambles, explanations, or the original chunk content unless it's an integral part of the new summary.
`;

/**
 * Generates the full prompt string for requesting a contextual summary from an LLM.
 *
 * @param docContent - The full content of the document.
 * @param chunkContent - The content of the specific chunk to be contextualized.
 * @returns The formatted prompt string.
 */
export function getContextualizationPrompt(docContent: string, chunkContent: string): string {
  if (!docContent || !chunkContent) {
    // Return a marker or throw an error if content is missing,
    // as LLM might not work well. For now, log and return a non-functional prompt.
    console.warn('Document content or chunk content is missing for contextualization.');
    return 'Error: Document or chunk content missing.';
  }
  return CONTEXTUAL_CHUNK_PROMPT_TEMPLATE.replace('{doc_content}', docContent).replace(
    '{chunk_content}',
    chunkContent
  );
}

/**
 * Combines the original chunk content with its generated contextual summary.
 *
 * @param chunkContent - The original content of the chunk.
 * @param generatedContext - The contextual summary generated by the LLM, intended to replace the chunk.
 * @returns The generated summary, or the original chunkContent if the summary is empty.
 */
export function getChunkWithContext(chunkContent: string, generatedContext: string): string {
  if (!generatedContext || generatedContext.trim() === '') {
    console.warn('Generated context (summary) is empty. Falling back to original chunk content.');
    return chunkContent;
  }
  // The generatedContext is now the new chunk content.
  return generatedContext.trim();
}

/**
 * Placeholder for generating mime-type specific prompts.
 * Currently defaults to the generic contextualization prompt.
 *
 * @param mimeType - The MIME type of the document (e.g., 'application/pdf', 'text/markdown').
 * @param docContent - The full content of the document.
 * @param chunkContent - The content of the specific chunk.
 * @returns The formatted prompt string.
 */
export function getPromptForMimeType(
  mimeType: string,
  docContent: string,
  chunkContent: string
): string {
  // TODO: Implement mime-type specific prompt variations if needed.
  // For example, for code, the instructions might be slightly different.
  // For now, we use the generic prompt for all types.
  // console.log(`Using generic contextualization prompt for mimeType: ${mimeType}`);
  return getContextualizationPrompt(docContent, chunkContent);
}
