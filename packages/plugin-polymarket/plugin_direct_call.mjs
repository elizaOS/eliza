import { initializeClobClient } from "./dist/index.js"; console.log("🚀 USING BUILT PLUGIN CODE FOR DIRECT API CALL"); console.log("=============================================="); const runtime = { getSetting: (key) => { const settings = { CLOB_API_URL: process.env.CLOB_API_URL, PRIVATE_KEY: process.env.PRIVATE_KEY, ALCHEMY_API_KEY: process.env.ALCHEMY_API_KEY }; return settings[key]; } }; const HARDCODED_VALUES = { tokenID: "45125304471008331376462711815711405166328159007449160535622895711350254020941", price: 0.01, side: "BUY", size: 1, feeRateBps: 0 }; async function makeOrderWithPlugin() { try { console.log("🔧 Using plugin ClobClient initialization..."); const clobClient = await initializeClobClient(runtime); console.log("✅ ClobClient initialized via plugin"); console.log("\n📊 Making order with hardcoded values:"); console.log(JSON.stringify(HARDCODED_VALUES, null, 2)); console.log("\n🔨 Creating order..."); const signedOrder = await clobClient.createOrder(HARDCODED_VALUES); console.log(`✅ Order signed: ${signedOrder.orderHash}`); console.log("\n📤 Posting to exchange..."); const result = await clobClient.postOrder(signedOrder, "GTC"); console.log("\n🎉 SUCCESS!"); console.log("Order Response:", JSON.stringify(result, null, 2)); } catch (error) { console.error("❌ Error:", error.message); if (error.message.includes("insufficient")) { console.log("💡 Insufficient USDC balance in wallet"); } else if (error.message.includes("allowance")) { console.log("💡 Need USDC allowance approval"); } } } makeOrderWithPlugin();
