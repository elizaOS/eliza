diff --git a/packages/core/src/runtime.ts b/packages/core/src/runtime.ts
index 4d608958d..717115854 100644
--- a/packages/core/src/runtime.ts
+++ b/packages/core/src/runtime.ts
@@ -44,6 +44,9 @@ import {
     type Actor,
     type Evaluator,
     type Memory,
+    getRapportTier,
+    RapportTier,
+    Content,
 } from "./types.ts";
 import { stringToUuid } from "./uuid.ts";
 
@@ -773,15 +776,40 @@ export class AgentRuntime implements IAgentRuntime {
         additionalKeys: { [key: string]: unknown } = {}
     ) {
         const { userId, roomId } = message;
-

         const conversationLength = this.getConversationLength();
-
         const [actorsData, recentMessagesData, goalsData]: [
             Actor[],
             Memory[],
             Goal[],
         ] = await Promise.all([
-            getActorDetails({ runtime: this, roomId }),
+            getActorDetails({ runtime: this, roomId }).then(actors => {
+                console.log("Actor details retrieved:", {
+                    roomId,
+                    actorCount: actors.length,
+                    actors: actors.map(a => ({id: a.id, username: a.username}))
+                });
+                if (!actors || actors.length === 0) {
+                    // This should never happen as we should at least have the message author
+                    console.error("No actors found for room:", roomId);
+                    console.error("Message details:", {
+                        messageId: message.id,
+                        userId: message.userId,
+                        roomId: message.roomId
+                    });
+                    
+                    // Emergency fallback: Create an actor from the message
+                    return [{
+                        id: message.userId,
+                        name: "Unknown User",
+                        username: "unknown",
+                        details: { tagline: "", summary: "", quote: "" }
+                    }];
+                }
+                return actors;
+            }),
             this.messageManager.getMemories({
                 roomId,
                 count: conversationLength,
@@ -794,9 +822,9 @@ export class AgentRuntime implements IAgentRuntime {
                 roomId,
             }),
         ]);
-
         const goals = formatGoalsAsString({ goals: goalsData });
-
         const actors = formatActors({ actors: actorsData ?? [] });
 
         const recentMessages = formatMessages({
@@ -934,12 +962,20 @@ Text: ${attachment.text}
             const recentInteractionsData = existingMemories.slice(0, 20);
             return recentInteractionsData;
         };
-
+        
         const recentInteractions =
             userId !== this.agentId
                 ? await getRecentInteractions(userId, this.agentId)
                 : [];
 
+        // Get formatted conversation if conversationId is provided
+        let recentUserConversations = "";
+        if (additionalKeys.conversationId) {
+            const currentConversationId = additionalKeys.conversationId as UUID;
+            recentUserConversations = await this.databaseAdapter.getFormattedConversation(currentConversationId);
+        }
         const getRecentMessageInteractions = async (
             recentInteractionsData: Memory[]
         ): Promise<string> => {
@@ -960,13 +996,13 @@ Text: ${attachment.text}
                     return `${sender}: ${message.content.text}`;
                 })
             );
-
             return formattedInteractions.join("\n");
         };
 
         const formattedMessageInteractions =
             await getRecentMessageInteractions(recentInteractions);
-
         const getRecentPostInteractions = async (
             recentInteractionsData: Memory[],
             actors: Actor[]
@@ -984,7 +1020,40 @@ Text: ${attachment.text}
             recentInteractions,
             actorsData
         );
+        // Retrieve user rapport if message is from a user
+        let userRapportScore = 0;
+        let userRapportTier = getRapportTier(0);  // Default to neutral
+
+        if (actorsData && actorsData.length > 0 && actorsData[0]?.id) {
+            userRapportScore = await this.databaseAdapter.getUserRapport(actorsData[0].id, this.agentId) || 0;
+            userRapportTier = getRapportTier(userRapportScore);
+            elizaLogger.log("Found user rapport for:", actorsData[0].id, "Score:", userRapportScore);
+        } else {
+            elizaLogger.log("No valid actor data found for rapport calculation");
+        }
+
+        const getUserRapportDescription = (tier: RapportTier): string => {
+            if(tier === RapportTier.NEUTRAL){
+                return '';
+            }
+            else{
+                return tier;
+            }
+        };
+
+        const userRapportDescription = getUserRapportDescription(userRapportTier);
+        console.log("Building rapport context for user:", {
+            userId: message.userId,
+            score: userRapportScore,
+            tier: userRapportTier,
+            description: userRapportDescription,
+        });
         // if bio is a string, use it. if its an array, pick one at random
         let bio = this.character.bio || "";
         if (Array.isArray(bio)) {
@@ -1003,9 +1072,9 @@ Text: ${attachment.text}
                 .join(" ");
         }
         const knowledegeData = await knowledge.get(this, message);
-
         const formattedKnowledge = formatKnowledge(knowledegeData);
-
         const initialState = {
             agentId: this.agentId,
             agentName,
@@ -1029,6 +1098,7 @@ Text: ${attachment.text}
             recentPostInteractions: formattedPostInteractions,
             // Raw memory[] array of interactions
             recentInteractionsData: recentInteractions,
+            recentUserConversations: recentUserConversations,
             // randomly pick one topic
             topic:
                 this.character.topics && this.character.topics.length > 0
@@ -1085,6 +1155,7 @@ Text: ${attachment.text}
                           })()
                       )
                     : "",
+                    
 
             postDirections:
                 this.character?.style?.all?.length > 0 ||
@@ -1148,9 +1219,11 @@ Text: ${attachment.text}
                 formattedAttachments && formattedAttachments.length > 0
                     ? addHeader("# Attachments", formattedAttachments)
                     : "",
+                    userRapportDescription: userRapportDescription,
             ...additionalKeys,
+        
         } as State;
-
         const actionPromises = this.actions.map(async (action: Action) => {
             const result = await action.validate(this, message, initialState);
             if (result) {
@@ -1158,7 +1231,7 @@ Text: ${attachment.text}
             }
             return null;
         });
-
         const evaluatorPromises = this.evaluators.map(async (evaluator) => {
             const result = await evaluator.validate(
                 this,
@@ -1170,7 +1243,7 @@ Text: ${attachment.text}
             }
             return null;
         });
-
         const [resolvedEvaluators, resolvedActions, providers] =
             await Promise.all([
                 Promise.all(evaluatorPromises),
@@ -1218,7 +1291,7 @@ Text: ${attachment.text}
                 providers
             ),
         };
-
         return { ...initialState, ...actionState } as State;
     }
 
