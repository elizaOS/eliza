"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[72755],{13274:(e,n,i)=>{i.d(n,{u:()=>p,v:()=>c});var s=i(14041),r=i(16622),t=i(53190),l=i(90838),a=i(36423),o=i(87854);function c(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:i}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return c(e).map((({props:{value:e,label:n,attributes:i,default:s}})=>({value:e,label:n,attributes:i,default:s})))}(i);return function(e){const n=(0,a.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function h({value:e,tabValues:n}){return n.some((n=>n.value===e))}function u({queryString:e=!1,groupId:n}){const i=(0,r.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(t),(0,s.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(i.location.search);n.set(t,e),i.replace({...i.location,search:n.toString()})}),[t,i])]}function p(e){const{defaultValue:n,queryString:i=!1,groupId:r}=e,l=d(e),[a,c]=(0,s.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:l}))),[p,g]=u({queryString:i,groupId:r}),[x,j]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[i,r]=(0,o.Dv)(n);return[i,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:r}),m=(()=>{const e=p??x;return h({value:e,tabValues:l})?e:null})();(0,t.A)((()=>{m&&c(m)}),[m]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);c(e),g(e),j(e)}),[g,j,l]),tabValues:l}}},14435:(e,n,i)=>{i.r(n),i.d(n,{default:()=>l});i(14041);var s=i(54357);const r={tabItem:"tabItem_OMyP"};var t=i(31085);function l({children:e,hidden:n,className:i}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:n,children:e})}},41897:(e,n,i)=>{i.d(n,{A:()=>p});var s=i(14041),r=i(54357),t=i(55245),l=i(13274),a=i(91310);const o={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};var c=i(31085);function d({className:e,block:n,selectedValue:i,selectValue:s,tabValues:l}){const a=[],{blockElementScrollPositionUntilNextRender:d}=(0,t.a_)(),h=e=>{const n=e.currentTarget,r=a.indexOf(n),t=l[r].value;t!==i&&(d(n),s(t))},u=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const i=a.indexOf(e.currentTarget)+1;n=a[i]??a[0];break}case"ArrowLeft":{const i=a.indexOf(e.currentTarget)-1;n=a[i]??a[a.length-1];break}}n?.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:l.map((({value:e,label:n,attributes:s})=>(0,c.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:e=>{a.push(e)},onKeyDown:u,onClick:h,...s,className:(0,r.A)("tabs__item",o.tabItem,s?.className,{"tabs__item--active":i===e}),children:n??e},e)))})}function h({lazy:e,children:n,selectedValue:i}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function u(e){const n=(0,l.u)(e);return(0,c.jsxs)("div",{className:(0,r.A)("tabs-container",o.tabList),children:[(0,c.jsx)(d,{...n,...e}),(0,c.jsx)(h,{...n,...e})]})}function p(e){const n=(0,a.default)();return(0,c.jsx)(u,{...e,children:(0,l.v)(e.children)},String(n))}},42526:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/plugins-49c22fcfc4cb4c32bc2e563db2bd18e7.png"},71184:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(14041);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},88011:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"core/plugins","title":"Plugin System","description":"Learn about ElizaOS plugins - modular extensions that enhance agent capabilities","source":"@site/docs/core/plugins.md","sourceDirName":"core","slug":"/core/plugins","permalink":"/docs/core/plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/core/plugins.md","tags":[],"version":"current","lastUpdatedBy":"0xbbjoker","lastUpdatedAt":1750196313000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Plugin System","description":"Learn about ElizaOS plugins - modular extensions that enhance agent capabilities","keywords":["plugins","extensions","modules","development","publishing","registry","npm","GitHub"],"image":"/img/plugins.png"},"sidebar":"tutorialSidebar","previous":{"title":"Knowledge","permalink":"/docs/core/knowledge"},"next":{"title":"Project","permalink":"/docs/core/project"}}');var r=i(31085),t=i(71184),l=i(41897),a=i(14435);const o={sidebar_position:8,title:"Plugin System",description:"Learn about ElizaOS plugins - modular extensions that enhance agent capabilities",keywords:["plugins","extensions","modules","development","publishing","registry","npm","GitHub"],image:"/img/plugins.png"},c="Plugins",d={},h=[{value:"Quick Start",id:"quick-start",level:2},{value:"Creating a New Plugin",id:"creating-a-new-plugin",level:3},{value:"Managing Plugins",id:"managing-plugins",level:3},{value:"Plugin Configuration",id:"plugin-configuration",level:3},{value:"Plugin Loading Process",id:"plugin-loading-process",level:3},{value:"Publishing Plugins",id:"publishing-plugins",level:3},{value:"Advanced Plugin Commands",id:"advanced-plugin-commands",level:3},{value:"Plugin Architecture",id:"plugin-architecture",level:2},{value:"Plugin Components",id:"plugin-components",level:3},{value:"Plugin Interface",id:"plugin-interface",level:3},{value:"Service Implementation",id:"service-implementation",level:3},{value:"Plugin Structure",id:"plugin-structure",level:2},{value:"Plugin Entry Point",id:"plugin-entry-point",level:3},{value:"Plugin Configuration",id:"plugin-configuration-1",level:3},{value:"Environment Variables and Secrets",id:"environment-variables-and-secrets",level:3},{value:"Access Pattern",id:"access-pattern",level:4},{value:"Configuration in Character File",id:"configuration-in-character-file",level:4},{value:"Bootstrap Plugin",id:"bootstrap-plugin",level:2},{value:"Extending Bootstrap Functionality",id:"extending-bootstrap-functionality",level:3},{value:"Developing a Plugin",id:"developing-a-plugin",level:2},{value:"Testing Your Plugin",id:"testing-your-plugin",level:3},{value:"Distribution &amp; PR Requirements",id:"distribution--pr-requirements",level:3},{value:"FAQ",id:"faq",level:2},{value:"What exactly is a plugin in ElizaOS?",id:"what-exactly-is-a-plugin-in-elizaos",level:3},{value:"When should I create a plugin versus using existing ones?",id:"when-should-i-create-a-plugin-versus-using-existing-ones",level:3},{value:"How do I manage plugin dependencies?",id:"how-do-i-manage-plugin-dependencies",level:3},{value:"Can I use a plugin in development before publishing?",id:"can-i-use-a-plugin-in-development-before-publishing",level:3},{value:"What&#39;s the difference between Actions and Services?",id:"whats-the-difference-between-actions-and-services",level:3},{value:"How do I handle rate limits with external APIs?",id:"how-do-i-handle-rate-limits-with-external-apis",level:3},{value:"What&#39;s the difference between publish options?",id:"whats-the-difference-between-publish-options",level:3},{value:"Additional Resources",id:"additional-resources",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"plugins",children:"Plugins"})}),"\n","\n",(0,r.jsx)(n.p,{children:"Plugins are modular extensions that enhance the capabilities of ElizaOS agents. They provide a flexible way to add new functionality, integrate external services, and customize agent behavior across different platforms."}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"Key Improvements in V2"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unified API"}),": Almost everything is accessible via ",(0,r.jsx)(n.code,{children:"runtime.methodName()"})," in the agent runtime for simpler development"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enhanced Model System"}),": The new ",(0,r.jsx)(n.code,{children:"useModel"})," approach allows for flexible model provider registration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Events System"}),": Formal support for event-based programming"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plugin Creation Workflow"}),": Simplified creation and testing via CLI"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing Infrastructure"}),": Built-in support for plugin testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No Monorepo Required"}),": Complete plugin development without touching the core codebase"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plugin Registry"}),": Manages the catalog of available plugins and handles their registration with the runtime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bootstrap Plugin"}),": Initializes core functionality required for all agents to operate"]}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:"The ElizaOS plugin system maintains the same basic concept as previous versions, with several new extension points (events, routes, tests, models) and features that significantly improve the developer experience."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Browse plugins the elizaOS community made here: ",(0,r.jsx)(n.a,{href:"/packages",children:"Package Showcase"})]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/packages",children:(0,r.jsx)(n.img,{src:i(42526).A+"",width:"1662",height:"1205"})})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["elizaOS maintains an official package registry at ",(0,r.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"github.com/elizaos-plugins/registry"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.p,{children:"The new CLI tool introduces a streamlined workflow for plugin development without ever needing to touch the ElizaOS monorepo directly:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create"}),": ",(0,r.jsx)(n.code,{children:"bun create eliza"})," or ",(0,r.jsx)(n.code,{children:"elizaos create"})," - Initialize a new plugin project with proper structure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Develop"}),": Edit the plugin code in the generated project structure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"elizaos test"})," - Test the plugin functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Run"}),": ",(0,r.jsx)(n.code,{children:"elizaos start"})," - Run the plugin with a default agent"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Publish"}),": ",(0,r.jsx)(n.code,{children:"elizaos publish"})," - Share your plugin with others"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-new-plugin",children:"Creating a New Plugin"}),"\n",(0,r.jsx)(n.p,{children:"You can create a new ElizaOS plugin using either method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Using bun create (recommended)\nbun create eliza\n\n# Or using the CLI directly\nelizaos create\n"})}),"\n",(0,r.jsx)(n.p,{children:'When prompted, select "Plugin" as the type to create. The CLI will guide you through the setup process, creating a plugin with the proper structure and dependencies.'}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"managing-plugins",children:"Managing Plugins"}),"\n",(0,r.jsx)(n.p,{children:"There are several ways to add plugins to your ElizaOS project:"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(a.default,{value:"cli",label:"Via CLI Commands (Recommended)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Add a plugin - supports multiple formats\nelizaos plugins add openai                    # Short name\nelizaos plugins add @elizaos/plugin-openai   # Full package name\nelizaos plugins add plugin-openai            # With plugin prefix\n\n# Add from GitHub\nelizaos plugins add github:owner/repo\nelizaos plugins add https://github.com/owner/repo\n\n# Add with specific branch or tag\nelizaos plugins add plugin-name --branch main\nelizaos plugins add plugin-name --tag v1.0.0\n\n# Skip environment variable prompts\nelizaos plugins add plugin-name --skip-env-prompt\n\n# Remove a plugin\nelizaos plugins remove @elizaos/plugin-farcaster\n\n# List available plugins (v1.x by default)\nelizaos plugins list\n\n# List all plugins with version info\nelizaos plugins list --all\n\n# List v0.x compatible plugins\nelizaos plugins list --v0\n\n# List installed plugins in current project\nelizaos plugins installed-plugins\n"})})}),(0,r.jsx)(a.default,{value:"package",label:"Via package.json",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "dependencies": {\n    "@elizaos/plugin-solana": "github:elizaos-plugins/plugin-solana",\n    "@elizaos/plugin-farcaster": "github:elizaos-plugins/plugin-farcaster"\n  }\n}\n'})})}),(0,r.jsxs)(a.default,{value:"character",label:"Via Character Definition",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// In your character JSON file\n{\n  "name": "MyAgent",\n  "plugins": ["@elizaos/plugin-farcaster", "@elizaos/plugin-example"],\n  // ...\n}\n'})}),(0,r.jsx)(n.p,{children:"Note: Plugins specified in character files are automatically loaded when the agent starts."})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"plugin-configuration",children:"Plugin Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Configure plugin settings in your character definition:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "MyAgent",\n  "plugins": ["@elizaos/plugin-example"],\n  "settings": {\n    "example": {\n      "enableFeatureX": true\n    },\n    "secrets": {\n      "EXAMPLE_API_KEY": "your-api-key-here"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"plugin-loading-process",children:"Plugin Loading Process"}),"\n",(0,r.jsx)(n.p,{children:"The AgentRuntime automatically loads the Bootstrap Plugin during initialization, before any other plugins:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"async initialize() {\n  // Register bootstrap plugin\n  await this.registerPlugin(bootstrapPlugin);\n\n  // Then register additional plugins\n  for (const plugin of this.plugins) {\n    await this.registerPlugin(plugin);\n  }\n\n  // Initialize other components\n  // ...\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"publishing-plugins",children:"Publishing Plugins"}),"\n",(0,r.jsx)(n.p,{children:"If you're a plugin developer, you can publish your plugin to make it available to others. The ElizaOS CLI provides several options for publishing your plugin depending on your needs."}),"\n",(0,r.jsx)(n.p,{children:"First, make sure your plugin is built and ready for distribution:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Navigate to your plugin directory\ncd my-eliza-plugin\n\n# Build your plugin\nnpm run build\n"})}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(a.default,{value:"full",label:"Full Publishing (Default)",children:[(0,r.jsx)(n.p,{children:"The default publishing process publishes to npm, GitHub, and submits to the ElizaOS registry:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Full publish (npm + GitHub + registry)\nelizaos publish\n"})}),(0,r.jsx)(n.p,{children:"This will:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Build and publish your plugin to npm"}),"\n",(0,r.jsx)(n.li,{children:"Create or update a GitHub repository"}),"\n",(0,r.jsx)(n.li,{children:"Submit a pull request to the ElizaOS registry (if you're a maintainer)"}),"\n"]}),(0,r.jsx)(n.p,{children:"For first-time publishers, the CLI will guide you through setting up GitHub credentials."})]}),(0,r.jsxs)(a.default,{value:"npm",label:"npm Only",children:[(0,r.jsx)(n.p,{children:"To publish only to npm (skip GitHub and registry):"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Publish to npm only\nelizaos publish --npm\n"})}),(0,r.jsx)(n.p,{children:"This allows users to install your plugin using standard npm commands:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @your-scope/plugin-name\n"})}),(0,r.jsx)(n.p,{children:"npm-only publishing is useful when you want to:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maintain your own package namespace"}),"\n",(0,r.jsx)(n.li,{children:"Use existing npm workflows"}),"\n",(0,r.jsx)(n.li,{children:"Skip GitHub repository creation"}),"\n"]})]}),(0,r.jsxs)(a.default,{value:"testing",label:"Test Mode",children:[(0,r.jsx)(n.p,{children:"Before publishing, validate the process without making any changes:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Test the publish process\nelizaos publish --test\n"})}),(0,r.jsx)(n.p,{children:"This runs through all the packaging and validation steps without actually publishing anything."}),(0,r.jsx)(n.p,{children:"Test mode is helpful for:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verifying your plugin structure is correct"}),"\n",(0,r.jsx)(n.li,{children:"Ensuring all required files are present"}),"\n",(0,r.jsx)(n.li,{children:"Checking that dependencies are properly configured"}),"\n",(0,r.jsx)(n.li,{children:"Validating that your plugin can be built successfully"}),"\n"]})]}),(0,r.jsxs)(a.default,{value:"dry-run",label:"Dry Run",children:[(0,r.jsx)(n.p,{children:"Generate registry files locally without publishing:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Generate registry metadata locally\nelizaos publish --dry-run\n"})}),(0,r.jsxs)(n.p,{children:["This creates the registry metadata files in ",(0,r.jsx)(n.code,{children:"packages/registry"})," without publishing anywhere."]})]}),(0,r.jsxs)(a.default,{value:"skip-registry",label:"Skip Registry",children:[(0,r.jsx)(n.p,{children:"Publish to npm and GitHub but skip the registry submission:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Skip registry PR creation\nelizaos publish --skip-registry\n"})}),(0,r.jsx)(n.p,{children:"Useful when you want to publish publicly but not submit to the official registry yet."})]})]}),"\n",(0,r.jsx)(n.p,{children:":::info Publishing Requirements\nWhen publishing a plugin:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Package.json Requirements"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Valid ",(0,r.jsx)(n.code,{children:"name"})," and ",(0,r.jsx)(n.code,{children:"version"})," fields"]}),"\n",(0,r.jsxs)(n.li,{children:["Proper ",(0,r.jsx)(n.code,{children:"agentConfig"})," section with ",(0,r.jsx)(n.code,{children:"pluginType"})]}),"\n",(0,r.jsx)(n.li,{children:"Repository URL (for GitHub publishing)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For Registry Submission"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Working demo/screenshots"}),"\n",(0,r.jsx)(n.li,{children:"Test results showing successful integration"}),"\n",(0,r.jsx)(n.li,{children:"Configuration examples"}),"\n",(0,r.jsx)(n.li,{children:"Complete documentation\n:::"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"advanced-plugin-commands",children:"Advanced Plugin Commands"}),"\n",(0,r.jsx)(n.p,{children:"The CLI also provides commands for plugin development and migration:"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(a.default,{value:"generate",label:"Generate Plugin",children:[(0,r.jsx)(n.p,{children:"Generate a new plugin using AI-powered code generation:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Interactive generation\nelizaos plugins generate\n\n# With spec file\nelizaos plugins generate --spec-file plugin-spec.json\n\n# Skip tests/validation\nelizaos plugins generate --skip-tests --skip-validation\n"})}),(0,r.jsxs)(n.p,{children:["Requires an Anthropic API key (via ",(0,r.jsx)(n.code,{children:"--api-key"})," or ",(0,r.jsx)(n.code,{children:"ANTHROPIC_API_KEY"})," env var)."]})]}),(0,r.jsxs)(a.default,{value:"upgrade",label:"Upgrade Plugin",children:[(0,r.jsx)(n.p,{children:"Upgrade a v0.x plugin to v1.x using AI-powered migration:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# From GitHub repository\nelizaos plugins upgrade github:owner/repo\n\n# From local folder\nelizaos plugins upgrade ./path/to/plugin\n\n# Skip validation steps\nelizaos plugins upgrade ./plugin --skip-tests\n"})}),(0,r.jsx)(n.p,{children:"This command helps migrate legacy plugins to the new architecture."})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"plugin-architecture",children:"Plugin Architecture"}),"\n",(0,r.jsx)(n.p,{children:"Eliza uses a unified plugin architecture where everything is a plugin - including services, adapters, actions, evaluators, and providers. This approach ensures consistent behavior and better extensibility."}),"\n",(0,r.jsx)(n.h3,{id:"plugin-components",children:"Plugin Components"}),"\n",(0,r.jsx)(n.p,{children:"Each plugin can provide one or more of the following components:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Component"}),(0,r.jsx)(n.th,{children:"Purpose"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Services"})}),(0,r.jsx)(n.td,{children:"Platform integrations (Discord, Telegram, etc.) or specialized capabilities"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Actions"})}),(0,r.jsx)(n.td,{children:"Executable functions triggered by the agent (reply, generate content, etc.)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Providers"})}),(0,r.jsx)(n.td,{children:"Context providers that supply info to the agent during decision making"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Evaluators"})}),(0,r.jsx)(n.td,{children:"Analyze conversations to extract insights and improve future interactions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Adapters"})}),(0,r.jsx)(n.td,{children:"Database or storage system integrations"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Model Handlers"})}),(0,r.jsx)(n.td,{children:"Register handlers for different model types (text generation, embeddings, etc.)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Event Handlers"})}),(0,r.jsx)(n.td,{children:"React to system events like messages, connections, or actions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"API Routes"})}),(0,r.jsx)(n.td,{children:"Add custom REST endpoints to the agent's HTTP interface"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Tests"})}),(0,r.jsx)(n.td,{children:"Include test suites to verify plugin functionality"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"plugin-interface",children:"Plugin Interface"}),"\n",(0,r.jsx)(n.p,{children:"All plugins implement the core Plugin interface:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Plugin {\n  name: string;\n  description: string;\n  config?: { [key: string]: any };\n\n  // Optional initialization method\n  init?: (config: Record<string, string>, runtime: IAgentRuntime) => Promise<void>;\n\n  // Components\n  services?: (typeof Service)[];\n  actions?: Action[];\n  providers?: Provider[];\n  evaluators?: Evaluator[];\n  adapters?: Adapter[];\n\n  // Additional features\n  routes?: Route[];\n  tests?: TestSuite[];\n  events?: { [key: string]: ((params: any) => Promise<any>)[] };\n  models?: ModelHandler[]; // For registering model providers\n\n  // Dependencies\n  dependencies?: string[]; // Required plugin dependencies\n  testDependencies?: string[]; // Additional dependencies for testing\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"service-implementation",children:"Service Implementation"}),"\n",(0,r.jsx)(n.p,{children:"Services are the core integration points for external platforms. A properly implemented service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Service, IAgentRuntime } from '@elizaos/core';\n\nexport class ExampleService extends Service {\n  // Required: Define the service type (used for runtime registration)\n  static serviceType = 'example';\n\n  // Required: Describe what this service enables the agent to do\n  capabilityDescription = 'Enables the agent to interact with the Example platform';\n\n  // Store runtime for service operations\n  constructor(protected runtime: IAgentRuntime) {\n    super();\n    // Initialize connections, setup event handlers, etc.\n  }\n\n  // Required: Static method to create and initialize service instance\n  static async start(runtime: IAgentRuntime): Promise<ExampleService> {\n    const service = new ExampleService(runtime);\n    // Additional initialization if needed\n    return service;\n  }\n\n  // Required: Clean up resources when service is stopped\n  async stop(): Promise<void> {\n    // Close connections, release resources\n  }\n\n  // Optional: Custom methods for your service functionality\n  async sendMessage(content: string, channelId: string): Promise<void> {\n    // Implementation\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"plugin-structure",children:"Plugin Structure"}),"\n",(0,r.jsx)(n.p,{children:"Each plugin repository should follow this structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"plugin-name/\n\u251c\u2500\u2500 images/                # Branding assets\n\u2502   \u251c\u2500\u2500 logo.png           # Square logo (400x400px)\n\u2502   \u251c\u2500\u2500 banner.png         # Banner image (1280x640px)\n\u2502   \u2514\u2500\u2500 screenshots/       # Feature screenshots\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts           # Main plugin entry point\n\u2502   \u251c\u2500\u2500 service.ts         # Service implementation\n\u2502   \u251c\u2500\u2500 actions/           # Plugin-specific actions\n\u2502   \u251c\u2500\u2500 providers/         # Data providers\n\u2502   \u251c\u2500\u2500 types.ts           # Type definitions\n\u2502   \u2514\u2500\u2500 environment.ts     # Configuration validation\n\u251c\u2500\u2500 tests/                 # Test suite\n\u251c\u2500\u2500 package.json           # Plugin configuration and dependencies\n\u2514\u2500\u2500 README.md              # Plugin documentation\n"})}),"\n",(0,r.jsx)(n.h3,{id:"plugin-entry-point",children:"Plugin Entry Point"}),"\n",(0,r.jsxs)(n.p,{children:["Your plugin's ",(0,r.jsx)(n.code,{children:"index.ts"})," should export a Plugin object:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Example plugin implementation\nimport { type Plugin } from '@elizaos/core';\nimport { ExampleService } from './service';\nimport { searchAction } from './actions/search';\nimport { statusProvider } from './providers/status';\n\nconst examplePlugin: Plugin = {\n  name: 'example',\n  description: 'Example platform integration for ElizaOS',\n  services: [ExampleService],\n  actions: [searchAction],\n  providers: [statusProvider],\n  init: async (config, runtime) => {\n    // Perform any necessary initialization\n    const apiKey = runtime.getSetting('EXAMPLE_API_KEY');\n    if (!apiKey) {\n      console.warn('EXAMPLE_API_KEY not provided');\n    }\n  },\n};\n\nexport default examplePlugin;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"plugin-configuration-1",children:"Plugin Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Your plugin's ",(0,r.jsx)(n.code,{children:"package.json"})," should include an ",(0,r.jsx)(n.code,{children:"agentConfig"})," section:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "@elizaos/plugin-example",\n  "version": "1.0.0",\n  "packageType": "plugin",\n  "platform": "node",\n  "agentConfig": {\n    "pluginType": "elizaos:plugin:1.0.0",\n    "pluginParameters": {\n      "API_KEY": {\n        "type": "string",\n        "description": "API key for the Example service"\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"environment-variables-and-secrets",children:"Environment Variables and Secrets"}),"\n",(0,r.jsx)(n.p,{children:"Plugins access configuration through the runtime with the following precedence:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Character settings secrets (highest priority)"}),"\n",(0,r.jsx)(n.li,{children:"Character settings"}),"\n",(0,r.jsx)(n.li,{children:"Global environment settings"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"access-pattern",children:"Access Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// In your service implementation\nconst apiKey = runtime.getSetting('EXAMPLE_API_KEY');\nconst debugMode = runtime.getSetting('EXAMPLE_DEBUG_MODE'); // Returns boolean for \"true\"/\"false\" strings\n"})}),"\n",(0,r.jsx)(n.h4,{id:"configuration-in-character-file",children:"Configuration in Character File"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "MyAgent",\n  "plugins": ["@elizaos/plugin-example"],\n  "settings": {\n    "example": {\n      "enableFeatureX": true\n    },\n    "secrets": {\n      "EXAMPLE_API_KEY": "your-api-key-here"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"bootstrap-plugin",children:"Bootstrap Plugin"}),"\n",(0,r.jsx)(n.p,{children:"The Bootstrap Plugin is a foundational component of ElizaOS that initializes the core functionality required for agents to operate. It's automatically loaded as part of the initialization process, establishing the minimum viable capabilities that all agents need."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const bootstrapPlugin: Plugin = {\n  name: 'bootstrap',\n  description: 'Agent bootstrap with basic actions and evaluators',\n  actions: [...],\n  events: {...},\n  evaluators: [...],\n  providers: [...],\n  services: [TaskService, ScenarioService],\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"The Bootstrap Plugin registers essential components across several categories to provide a foundation for all agents. These components can be extended by custom plugins."}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(a.default,{value:"actions",label:"Actions",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Action"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"replyAction"})}),(0,r.jsx)(n.td,{children:"Generates and sends a response to a message"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"followRoomAction"})}),(0,r.jsx)(n.td,{children:"Enables an agent to actively follow a room"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"unfollowRoomAction"})}),(0,r.jsx)(n.td,{children:"Stops an agent from following a room"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"muteRoomAction"})}),(0,r.jsx)(n.td,{children:"Mutes notifications from a room"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"unmuteRoomAction"})}),(0,r.jsx)(n.td,{children:"Unmutes notifications from a room"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sendMessageAction"})}),(0,r.jsx)(n.td,{children:"Sends a message to a specific room"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ignoreAction"})}),(0,r.jsx)(n.td,{children:"Explicitly ignores a message"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"noneAction"})}),(0,r.jsx)(n.td,{children:"Acknowledges a message without taking action"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"updateEntityAction"})}),(0,r.jsx)(n.td,{children:"Updates properties of an entity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"choiceAction"})}),(0,r.jsx)(n.td,{children:"Presents choices to users and handles responses"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"updateRoleAction"})}),(0,r.jsx)(n.td,{children:"Updates a user's role in a world"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"updateSettingsAction"})}),(0,r.jsx)(n.td,{children:"Updates agent or world settings"})]})]})]})}),(0,r.jsx)(a.default,{value:"providers",label:"Providers",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Provider"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"characterProvider"})}),(0,r.jsx)(n.td,{children:"Provides the agent's personality and configuration"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"recentMessagesProvider"})}),(0,r.jsx)(n.td,{children:"Retrieves recent conversation history"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"knowledgeProvider"})}),(0,r.jsx)(n.td,{children:"Supplies factual information from the knowledge base"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timeProvider"})}),(0,r.jsx)(n.td,{children:"Provides awareness of current time and date"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"entitiesProvider"})}),(0,r.jsx)(n.td,{children:"Supplies information about entities in the current context"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"relationshipsProvider"})}),(0,r.jsx)(n.td,{children:"Provides information about entity relationships"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"factsProvider"})}),(0,r.jsx)(n.td,{children:"Retrieves relevant facts from memory"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"roleProvider"})}),(0,r.jsx)(n.td,{children:"Provides role information within worlds"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"settingsProvider"})}),(0,r.jsx)(n.td,{children:"Supplies configured settings"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"anxietyProvider"})}),(0,r.jsx)(n.td,{children:"Informs agent of potential issues to be careful about"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"attachmentsProvider"})}),(0,r.jsx)(n.td,{children:"Handles media and file attachments"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"providersProvider"})}),(0,r.jsx)(n.td,{children:"Meta-provider with information about available providers"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"actionsProvider"})}),(0,r.jsx)(n.td,{children:"Meta-provider with information about available actions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"evaluatorsProvider"})}),(0,r.jsx)(n.td,{children:"Meta-provider with information about available evaluators"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"choiceProvider"})}),(0,r.jsx)(n.td,{children:"Manages choice-based interactions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"capabilitiesProvider"})}),(0,r.jsx)(n.td,{children:"Provides information about agent capabilities"})]})]})]})}),(0,r.jsxs)(a.default,{value:"services",label:"Services & Evaluators",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Services:"})}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Service"}),(0,r.jsx)(n.th,{children:"Purpose"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TaskService"})}),(0,r.jsx)(n.td,{children:"Manages deferred, scheduled, and repeating tasks"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ScenarioService"})}),(0,r.jsx)(n.td,{children:"Handles scenario-based interactions and testing"})]})]})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Evaluators:"})}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Evaluator"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"reflectionEvaluator"})}),(0,r.jsx)(n.td,{children:"Enables self-awareness and learning from interactions"})]})})]})]}),(0,r.jsxs)(a.default,{value:"events",label:"Event Handlers",children:[(0,r.jsx)(n.p,{children:"The Bootstrap Plugin registers handlers for key system events that enable the core message processing flow:"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Core Events:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MESSAGE_RECEIVED"})," - Processes new messages and generates responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"REACTION_RECEIVED"})," - Tracks reactions to messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"VOICE_MESSAGE_RECEIVED"})," - Handles audio messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST_GENERATED"})," - Creates social media content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MESSAGE_SENT"})," - Logs outgoing messages"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"World Events:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WORLD_JOINED"})," / ",(0,r.jsx)(n.code,{children:"WORLD_CONNECTED"})," - Synchronizes data when joining worlds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ENTITY_JOINED"})," / ",(0,r.jsx)(n.code,{children:"ENTITY_LEFT"})," - Manages entity presence"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Lifecycle Events:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ACTION_STARTED"})," / ",(0,r.jsx)(n.code,{children:"ACTION_COMPLETED"})," - Tracks action execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EVALUATOR_STARTED"})," / ",(0,r.jsx)(n.code,{children:"EVALUATOR_COMPLETED"})," - Monitors evaluator processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RUN_STARTED"})," / ",(0,r.jsx)(n.code,{children:"RUN_ENDED"})," / ",(0,r.jsx)(n.code,{children:"RUN_TIMEOUT"})," - Manages message processing lifecycle"]}),"\n"]}),(0,r.jsx)(n.p,{children:"The message processing flow follows these steps:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Receive message via ",(0,r.jsx)(n.code,{children:"MESSAGE_RECEIVED"})," event"]}),"\n",(0,r.jsx)(n.li,{children:"Save message to memory"}),"\n",(0,r.jsx)(n.li,{children:"Check if agent should respond"}),"\n",(0,r.jsx)(n.li,{children:"If responding, compose state from providers"}),"\n",(0,r.jsx)(n.li,{children:"Generate a response using the language model"}),"\n",(0,r.jsx)(n.li,{children:"Process any actions specified in the response"}),"\n",(0,r.jsx)(n.li,{children:"Run evaluators on the conversation"}),"\n",(0,r.jsx)(n.li,{children:"Emit lifecycle events throughout the process"}),"\n"]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"extending-bootstrap-functionality",children:"Extending Bootstrap Functionality"}),"\n",(0,r.jsx)(n.p,{children:"While the Bootstrap Plugin provides core functionality, it's designed to be extended by other plugins. Custom plugins can:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add new actions"})," - Extend the agent's capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Register additional providers"})," - Supply more contextual information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add evaluators"})," - Create new ways to analyze and learn from interactions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle additional events"})," - React to more system events"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initialize custom services"})," - Provide new functionality"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When working with plugins in relation to the Bootstrap Plugin:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Don't modify bootstrap directly"})," - Instead, create custom plugins to extend functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Understand provider contribution"})," - Know how each provider contributes to the agent's context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Learn the core actions"})," - Become familiar with the actions that all agents can perform"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leverage event handlers"})," - Use the event system for reactive behavior"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extend, don't replace"})," - Build on top of bootstrap functionality rather than replacing it"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"developing-a-plugin",children:"Developing a Plugin"}),"\n",(0,r.jsx)(n.p,{children:"When developing a new plugin, focus on these key aspects:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service Implementation"}),": Create a solid service class following the pattern above"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proper Error Handling"}),": Handle API failures gracefully"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Definitions"}),": Define clear interfaces and types"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Include detailed setup instructions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tests"}),": Add test cases for your functionality"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"testing-your-plugin",children:"Testing Your Plugin"}),"\n",(0,r.jsx)(n.p,{children:"During development, you can test your plugin locally:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Start with your plugin from character file\nelizaos start --character=./characters/test.character.json\n\n# Character file can specify plugins:\n{\n  "name": "TestAgent",\n  "plugins": ["./path/to/local/plugin", "@elizaos/plugin-example"]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Note: The ",(0,r.jsx)(n.code,{children:"--plugins"})," flag mentioned in some examples is not currently implemented. Plugins should be specified in character files or added to the project dependencies."]}),"\n",(0,r.jsx)(n.h3,{id:"distribution--pr-requirements",children:"Distribution & PR Requirements"}),"\n",(0,r.jsxs)(n.p,{children:["When submitting a plugin to the ",(0,r.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"elizaOS Registry"}),", include:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Working Demo"}),": Screenshots or video of your plugin in action"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test Results"}),": Evidence of successful integration and error handling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Example"}),": Show how to properly configure your plugin"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quality Checklist"}),":","\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Plugin follows the standard structure"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Required branding assets are included"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Documentation is complete"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","GitHub topics properly set"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tests are passing"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Includes error handling"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,r.jsx)(n.h3,{id:"what-exactly-is-a-plugin-in-elizaos",children:"What exactly is a plugin in ElizaOS?"}),"\n",(0,r.jsx)(n.p,{children:"A plugin is a modular extension that adds new capabilities to ElizaOS agents, such as API integrations, custom actions, or platform connections. Plugins allow you to expand agent functionality and share reusable components with other developers."}),"\n",(0,r.jsx)(n.h3,{id:"when-should-i-create-a-plugin-versus-using-existing-ones",children:"When should I create a plugin versus using existing ones?"}),"\n",(0,r.jsx)(n.p,{children:"Create a plugin when you need custom functionality not available in existing plugins, want to integrate with external services, or plan to share reusable agent capabilities with the community."}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-manage-plugin-dependencies",children:"How do I manage plugin dependencies?"}),"\n",(0,r.jsxs)(n.p,{children:["Plugin dependencies are managed through your project's ",(0,r.jsx)(n.code,{children:"package.json"}),". You can add plugins using the ",(0,r.jsx)(n.code,{children:"elizaos plugins add"})," command or npm directly. Plugins specified in character files are automatically loaded when the agent starts."]}),"\n",(0,r.jsx)(n.h3,{id:"can-i-use-a-plugin-in-development-before-publishing",children:"Can I use a plugin in development before publishing?"}),"\n",(0,r.jsx)(n.p,{children:"Yes, you can reference local plugins in your character file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "DevAgent",\n  "plugins": ["./path/to/local/plugin"]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"whats-the-difference-between-actions-and-services",children:"What's the difference between Actions and Services?"}),"\n",(0,r.jsx)(n.p,{children:"Actions handle specific agent responses or behaviors, while Services provide platform integrations (like Discord or Telegram) or ongoing background functionality that multiple actions might use."}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-handle-rate-limits-with-external-apis",children:"How do I handle rate limits with external APIs?"}),"\n",(0,r.jsx)(n.p,{children:"Implement proper backoff strategies in your service implementation and consider using a queue system for message handling to respect platform rate limits."}),"\n",(0,r.jsx)(n.h3,{id:"whats-the-difference-between-publish-options",children:"What's the difference between publish options?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Default (",(0,r.jsx)(n.code,{children:"elizaos publish"}),")"]}),": Publishes to npm, GitHub, and submits to registry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["npm only (",(0,r.jsx)(n.code,{children:"--npm"}),")"]}),": Only publishes to npm registry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Test (",(0,r.jsx)(n.code,{children:"--test"}),")"]}),": Validates everything without publishing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Dry run (",(0,r.jsx)(n.code,{children:"--dry-run"}),")"]}),": Generates registry files locally"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Skip registry (",(0,r.jsx)(n.code,{children:"--skip-registry"}),")"]}),": Publishes to npm/GitHub but skips registry PR"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"ElizaOS Registry"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/elizaos-plugins",children:"Example Plugins"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://discord.gg/elizaos",children:"Discord Community"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);