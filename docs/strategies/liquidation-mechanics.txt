# Liquidation Mechanics

## Introduction

Liquidation mechanics are the emergency brakes of DeFi lending, enforcing collateralization requirements when markets turn violent. Understanding these systems isn't just about avoiding liquidation—it's about exploiting the opportunities they create and building antifragile strategies. Each protocol implements unique liquidation designs, from Aave's Dutch auctions to Curve's soft liquidation bands, creating a complex ecosystem of risk and reward. For Levva's strategies, liquidation mechanics determine position sizing limits, automation requirements, and the viability of leveraged approaches across both Diversified DeFi Yield and Custom strategy categories.

## Key Concepts, Ideas, and Formulas

### Universal Health Factor Framework

**Standard Health Factor:**
```
Health Factor = (Σ(Collateral_i × LiquidationThreshold_i)) / Total_Debt
```

**When HF < 1.0**: Position becomes eligible for liquidation

**Collateral-Specific Variations:**
```
Adjusted_Collateral_Value = Base_Value × LiquidationThreshold × Price_Impact_Factor
```

### Protocol-Specific Implementations

**Aave V3 Liquidation Engine:**
```solidity
function liquidationCall(
    address collateral,
    address debt,
    address user,
    uint256 debtToCover,
    bool receiveAToken
) external {
    require(getUserHealthFactor(user) < 1e18, "Health factor not below threshold");
    // Execute liquidation with bonus
}
```

**Liquidation Parameters:**
- **Close Factor**: Up to 50% of debt per liquidation
- **Liquidation Bonus**: 5-15% depending on asset risk
- **Grace Period**: None (immediate liquidation when HF < 1)

**Compound V2/V3 Model:**
```
Liquidation_Amount = min(
    Borrower_Debt × Close_Factor,
    Collateral_Value ÷ (1 + Liquidation_Incentive)
)
```

**MakerDAO Auction System:**
```
Dutch_Auction_Price = Starting_Price × (1 - cut)^(time_elapsed/tau)
```
Where `cut` is the price reduction rate and `tau` is the time parameter.

### Advanced Liquidation Models

**Euler's Soft Liquidation:**
- **Violator Mode**: Allows partial debt repayment before full liquidation
- **Forgiveness Mechanism**: Borrowers can accept losses to avoid full liquidation
- **MEV Resistance**: Reduces front-running through randomized parameters

**Curve LLAMMA (Lending-Liquidating AMM):**
```python
def soft_liquidation_bands(collateral_amount, price_ranges):
    bands = []
    for i, price_range in enumerate(price_ranges):
        band_collateral = collateral_amount / len(price_ranges)
        bands.append({
            'price_range': price_range,
            'collateral': band_collateral,
            'active': is_price_in_range(current_price, price_range)
        })
    return bands
```

## Examples and Applications

### Scenario 1: Aave ETH Position Management

**Initial Setup:**
- **Collateral**: 10 ETH at $2,500 = $25,000
- **Borrowed**: 15,000 USDC  
- **LTV**: 60% (15,000/25,000)
- **Liquidation Threshold**: 82.5%
- **Health Factor**: 1.375 (safe)

**Liquidation Trigger:**
```
Critical_ETH_Price = 15,000 / (10 × 0.825) = $1,818
```

**Liquidation Execution:**
- **Liquidator Action**: Repay up to 7,500 USDC (50% close factor)
- **Collateral Seized**: 7,500 / 1,818 × 1.05 = 4.33 ETH
- **Liquidation Profit**: 4.33 × $1,818 - 7,500 = $375

### Scenario 2: Leveraged PT Farming Protection

**Levva Custom Strategy Setup:**
- **Base Asset**: 100,000 USDC
- **PT Target**: PT-sUSDe (3x leverage)  
- **Borrowed Amount**: 200,000 USDC
- **Total Position**: 300,000 USDC in PT-sUSDe

**Risk Parameters:**
```python
def calculate_liquidation_risk(pt_price, underlying_price, leverage):
    price_decline_threshold = (1 - 1/leverage) * 0.9  # 90% of theoretical max
    liquidation_price = underlying_price * (1 - price_decline_threshold)
    safety_margin = (pt_price - liquidation_price) / pt_price
    return safety_margin
```

**For 3x leverage**: ~30% price decline triggers liquidation

### Scenario 3: Cross-Protocol Liquidation Arbitrage

**Opportunity Identification:**
```python
def find_liquidation_arbitrage():
    for protocol in [aave, compound, euler]:
        underwater_positions = get_liquidatable_positions(protocol)
        for position in underwater_positions:
            profit = calculate_liquidation_profit(position)
            if profit > gas_costs * safety_multiplier:
                execute_liquidation(position)
```

**Example Profit Calculation:**
- **Liquidation Bonus**: 10%
- **Slippage Cost**: 2%
- **Gas Cost**: $50
- **Net Profit**: (Liquidation_Amount × 8%) - $50

## Risks and Mitigations

### Liquidation Cascade Risks

**Systemic Risk Factors:**
- Correlated collateral assets (all ETH LRTs declining together)
- Flash crash scenarios exceeding oracle update speeds
- Network congestion preventing timely liquidations

**Historical Examples:**
- **March 2020**: $8M+ in liquidations during ETH flash crash
- **May 2022**: Terra ecosystem collapse triggering cross-protocol liquidations
- **November 2022**: FTX contagion affecting DeFi liquidations

### Protection Strategies

**Health Factor Monitoring:**
```python
def automated_protection_system():
    current_hf = get_health_factor()
    
    if current_hf < 1.2:
        # Emergency: Add collateral or repay debt
        emergency_deleverage()
    elif current_hf < 1.5:
        # Warning: Reduce position size
        partial_deleverage()
    elif current_hf < 2.0:
        # Caution: Monitor closely
        increase_monitoring_frequency()
```

**DeFi Saver Integration:**
- **Automation**: Set target HF ranges (1.5-2.5)
- **Repay Threshold**: Automatic debt repayment when HF < 1.3
- **Boost Threshold**: Automatic leverage increase when HF > 2.5

**Flash Loan Protection:**
```solidity
contract LiquidationProtection {
    mapping(address => uint256) public lastActionBlock;
    
    modifier flashLoanResistant() {
        require(block.number > lastActionBlock[msg.sender], "Same block action");
        lastActionBlock[msg.sender] = block.number;
        _;
    }
}
```

**Cross-Protocol Diversification:**
- Spread collateral across multiple protocols
- Use different oracle systems (Chainlink vs. Uniswap TWAP)
- Implement protocol-specific position limits

## Unconventional Wisdom and Insights

### The Liquidation Premium Paradox

**Counter-Intuitive Reality**: Higher liquidation bonuses don't always mean better liquidator participation. Research shows:

```python
optimal_liquidation_bonus = 0.05 + (volatility * 0.1) + (liquidity_depth ** -0.5)
```

**Reasoning**: 
- Too low: Insufficient incentive during high gas periods
- Too high: Encourages predatory liquidation behavior
- Sweet spot: 5-8% for most assets

### The Oracle MEV Extraction Pattern

**Traditional View**: Oracles update prices → liquidations follow
**Reality**: MEV bots often **predict** oracle updates and pre-position

**Protection Strategy**:
```python
def oracle_update_prediction():
    price_deviation = abs(current_market_price - last_oracle_price) / last_oracle_price
    time_since_update = current_time - last_oracle_update_time
    
    update_probability = sigmoid(price_deviation * 10 + time_since_update / 300)
    
    if update_probability > 0.8:
        prepare_liquidation_defense()
```

### The Liquidation Timing Game

**Insight**: Liquidations often cluster around specific times:
- **UTC 0:00, 8:00, 16:00**: Oracle update frequencies
- **Friday 21:00 UTC**: Weekend position closures
- **Monthly futures expiry**: Cross-market liquidation pressure

**Strategy**: Adjust HF targets based on time-of-day risk patterns.

### Liquidation Debt Restructuring

**Advanced Technique**: Instead of liquidation, some protocols allow debt restructuring:

```solidity
function restructureDebt(
    address user,
    address oldDebtAsset,
    address newDebtAsset,
    uint256 amount
) external {
    // Convert high-interest debt to low-interest debt
    // Maintain collateralization while improving HF
}
```

### The Reflexivity of Liquidation Fear

**Behavioral Finance Insight**: Fear of liquidation creates self-fulfilling prophecies:
1. Users over-collateralize to avoid liquidation
2. This reduces borrowing demand
3. Lower utilization reduces interest rates  
4. Making borrowing more attractive again

**Strategic Implication**: Counter-cyclical positioning often yields superior risk-adjusted returns.

### Cross-Chain Liquidation Arbitrage

**Emerging Opportunity**: Same user, different chains, liquidation arbitrage:

```python
def cross_chain_liquidation_scan():
    user_positions = {}
    for chain in [ethereum, arbitrum, polygon]:
        positions = get_user_positions(user_address, chain)
        user_positions[chain] = positions
    
    # Look for cross-chain arbitrage opportunities
    return analyze_cross_chain_liquidation_profit(user_positions)
```

## Further Links and Knowledge Base

### Liquidation Monitoring Tools

**Real-Time Dashboards:**
- **DeFi Pulse**: Protocol-specific liquidation tracking
- **Liquidations.org**: Cross-protocol liquidation feeds
- **Gauntlet Analytics**: Risk parameter optimization insights
- **Blockanalitica**: Maker-specific liquidation analytics

**API Endpoints:**
```python
# Aave liquidation data
aave_liquidations = requests.get(
    "https://api.thegraph.com/subgraphs/name/aave/protocol-v2",
    json={"query": liquidation_query}
)

# Compound liquidation events  
compound_liquidations = web3.eth.get_logs({
    'address': compound_comptroller,
    'topics': [liquidation_event_signature]
})
```

### Academic Research

- **"Liquidations: DeFi on a Knife-edge"** (Gudgeon et al., 2020)
- **"DeFi Liquidations: Incentives, Risks, and Instabilities"** (Perez et al., 2021)  
- **"An Empirical Study of DeFi Liquidations"** (Wang et al., 2022)

### Protocol Documentation

**Technical Specifications:**
- **Aave**: [Liquidation Guide](https://docs.aave.com/developers/guides/liquidations)
- **Compound**: [Liquidation Incentives](https://compound.finance/docs/comptroller#liquidate-borrow)
- **MakerDAO**: [Liquidation System](https://docs.makerdao.com/keepers/auctions/liquidation-auctions)
- **Euler**: [Liquidation Design](https://docs.euler.finance/getting-started/methodology/liquidations)

### Risk Management Frameworks

**Gauntlet Risk Models:**
- VaR-based liquidation parameter optimization
- Agent-based simulation of liquidation scenarios
- Cross-protocol risk correlation analysis

**Chaos Labs Simulations:**
- Stress testing liquidation systems
- Market impact modeling for large liquidations
- Parameter sensitivity analysis

### Levva Integration Points

**Strategy Classification:**
- **Diversified DeFi Yield**: Conservative HF targets (>2.0)
- **Custom Strategies**: Aggressive HF management (1.2-2.0)

**Automation Requirements:**
- Real-time health factor monitoring
- Automated position adjustment triggers  
- Cross-protocol liquidation protection
- MEV-resistant execution strategies

**Risk Framework Integration:**
```python
class LevvaLiquidationManager:
    def __init__(self, strategy_type):
        if strategy_type == "diversified_defi_yield":
            self.min_health_factor = 2.0
            self.target_health_factor = 2.5
        elif strategy_type == "custom":
            self.min_health_factor = 1.3
            self.target_health_factor = 1.8
    
    def adjust_position(self, current_hf):
        if current_hf < self.min_health_factor:
            return "emergency_deleverage"
        elif current_hf < self.target_health_factor:
            return "reduce_leverage"
        else:
            return "maintain_position"
```

### Related Knowledge Base Files
- `position-sizing.md` - Optimal leverage ratios considering liquidation risk
- `lending-protocols.md` - Protocol-specific liquidation implementations  
- `portfolio-theory.md` - Liquidation risk in portfolio context
- `yield-farming-basics.md` - Balancing yield and liquidation risk