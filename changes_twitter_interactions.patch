diff --git a/packages/client-twitter/src/interactions.ts b/packages/client-twitter/src/interactions.ts
index 7623d4b22..6965820f5 100644
--- a/packages/client-twitter/src/interactions.ts
+++ b/packages/client-twitter/src/interactions.ts
@@ -33,6 +33,8 @@ export const twitterMessageHandlerTemplate =
 {{lore}}
 {{topics}}
 
+
+
 {{providers}}
 
 {{characterMessageExamples}}
@@ -47,13 +49,14 @@ Recent interactions between {{agentName}} and other users:
 # Task: Generate a post/reply in the voice, style and perspective of {{agentName}} (@{{twitterUserName}}) while using the thread of tweets as additional context:
 Current Post:
 {{currentPost}}
+Here is the descriptions of images in the Current Post:
 {{imageContext}}
 
 Thread of Tweets You Are Replying To:
 {{formattedConversation}}
 
 {{actions}}
-# Task: Generate a post in the voice, style and perspective of {{agentName}} (@{{twitterUserName}}), check'Thread of Tweets You Are Replying To' to avoid repeating yourself. You MUST include an action if the current post text includes a prompt that is similar to one of the available actions mentioned here:
+# Task: Generate a post in the voice, style and perspective of {{agentName}} (@{{twitterUserName}}). {{userRapportDescription}} check 'Thread of Tweets You Are Replying To' to avoid repeating yourself. You MUST include an action if the current post text includes a prompt that is similar to one of the available actions mentioned here:
 {{actionNames}}
 Here is the current post text again. Remember to include an action if the current post text includes a prompt that asks for one of the available actions mentioned above (does not need to be exact)
 {{currentPost}}
@@ -101,8 +104,14 @@ export class TwitterInteractionClient {
     }
 
     async start() {
-        const handleTwitterInteractionsLoop = () => {
-            this.handleTwitterInteractions();
+        const handleTwitterInteractionsLoop = async () => {
+            await this.handleTwitterInteractions();
+            console.log("handleTwitterInteractionsLoop");
+            
+            // Run checkActiveConversations right after
+            await this.checkActiveConversations();
+
+            // Schedule next iteration of both checks
             setTimeout(
                 handleTwitterInteractionsLoop,
                 Number(
@@ -110,40 +119,33 @@ export class TwitterInteractionClient {
                 ) * 1000 // Default to 2 minutes
             );
         };
+
+        // Start the combined loop
         handleTwitterInteractionsLoop();
+    }
 
-        const checkConversationsLoop = () => {
-            this.checkActiveConversations();
-            setTimeout(
-                checkConversationsLoop,
-                this.runtime.getSetting("TWITTER_POLL_INTERVAL") * 1000
-            );
-        };
-        setTimeout(() => {
-            checkConversationsLoop();
-        }, 2 * 60 * 1000); // 2 minutes offset
-    
-        }
-    
-        async checkActiveConversations() {
-            try {
-                elizaLogger.log("Checking active conversations");
-                // Get all active conversations
-                const activeConversations = await this.runtime.databaseAdapter.getConversationsByStatus('ACTIVE');
-    
-                for (const conversation of activeConversations) {
-                    const messageIds = JSON.parse(conversation.messageIds);
-                    if( isConversationDone(conversation.id, this.runtime)&&messageIds.length>=3){
-                        await analyzeConversation(conversation.id);
-                    }
-                    else{
-                        elizaLogger.log("Conversation not done yet, skipping");
-                    }
+    async checkActiveConversations() {
+        try {
+            console.log("checkConversationsLoop");
+
+            elizaLogger.log("Checking active conversations");
+            // Get all active conversations
+            const activeConversations = await this.runtime.databaseAdapter.getConversationsByStatus('ACTIVE');
+
+            for (const conversation of activeConversations) {
+                const messageIds = JSON.parse(conversation.messageIds);
+          
+                if( isConversationDone(conversation.id, this.runtime)&&messageIds.length>=3){
+                    await analyzeConversation(conversation.id, this.runtime);
+                }
+                else{
+                    elizaLogger.debug("Conversation not done yet, skipping");
                 }
-            } catch (error) {
-                elizaLogger.error("Error checking conversations:", error);
             }
+        } catch (error) {
+            elizaLogger.error("Error checking conversations:", error);
         }
+    }
 
     async handleTwitterInteractions() {
         elizaLogger.log("Checking Twitter interactions");
@@ -304,7 +306,7 @@ export class TwitterInteractionClient {
                         tweet.name,
                         "twitter"
                     );
-                    console.log("building THREAD")
+                    console.log("building THREAD inside interactions")
                     const thread = await buildConversationThread(
                         tweet,
                         this.client
@@ -387,6 +389,7 @@ export class TwitterInteractionClient {
             twitterUserName: this.runtime.getSetting("TWITTER_USERNAME"),
             currentPost,
             formattedConversation,
+            userRapport: await this.runtime.databaseAdapter.getUserRapport(tweet.username, this.runtime.agentId) || 0
         });
 
         // check if the tweet exists, save if it doesn't
@@ -542,7 +545,7 @@ export class TwitterInteractionClient {
         const visited: Set<string> = new Set();
         const conversationId = stringToUuid(tweet.conversationId + "-" + this.runtime.agentId);
         const existingConversation = await this.runtime.databaseAdapter.getConversation(conversationId);
-        elizaLogger.log("Starting to build conversation thread");
+        console.log("Starting to build conversation thread");
         console.log("building THREAD")
         async function processThread(currentTweet: Tweet, depth: number = 0) {
             elizaLogger.log("Processing tweet:", {
@@ -680,7 +683,6 @@ elizaLogger.log("Conversation thread built:", {
 });
 
 
-
     if (existingConversation) {
         // Parse existing JSON arrays
         elizaLogger.log("Updating existing conversation", {
