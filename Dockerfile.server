FROM node:23.3.0-slim AS builder

WORKDIR /app

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    ffmpeg \
    g++ \
    git \
    make \
    python3 \
    unzip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install bun and turbo
RUN npm install -g bun@1.2.5 turbo@2.3.3

# Create python symlink
RUN ln -s /usr/bin/python3 /usr/bin/python

# Copy monorepo files needed for workspace resolution
COPY package.json turbo.json tsconfig.json lerna.json .npmrc ./
COPY scripts ./scripts

# Copy all packages for workspace dependencies
COPY packages ./packages

# Install dependencies (skip git submodules in Docker)
ENV SKIP_POSTINSTALL=1
RUN bun install --no-cache

# Build all packages (needed for workspace dependencies)
RUN bun run build

# Runtime stage
FROM node:23.3.0-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    ffmpeg \
    git \
    python3 \
    unzip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install bun
RUN npm install -g bun@1.2.5

# Copy built packages and dependencies
COPY --from=builder /app/package.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/packages ./packages

# Set working directory to server package
WORKDIR /app/packages/server

# Create data directory for PGLite
RUN mkdir -p data/eliza-server

# Set environment
ENV NODE_ENV=production
ENV PORT=3000

# Expose port
EXPOSE 3000

# Run the production server
CMD ["bun", "run", "src/server.ts"]