diff --git a/packages/core/src/types.ts b/packages/core/src/types.ts
index 148111f84..011394320 100644
--- a/packages/core/src/types.ts
+++ b/packages/core/src/types.ts
@@ -324,6 +324,14 @@ export interface State {
     /** Optional knowledge data */
     knowledgeData?: KnowledgeItem[];
 
+    /** User rapport score based on memory */
+    userRapport?: number;
+
+    /** User rapport tier based on score */
+    userRapportDescription?: string;
+
+    /** Recent conversations specific to the current user */
+    recentUserConversations?: string;
     /** Additional dynamic properties */
     [key: string]: unknown;
 }
@@ -521,6 +529,9 @@ export interface Account {
 
     /** Optional avatar URL */
     avatarUrl?: string;
+
+    /** User rapport score based on memory */
+    userRapport?: number;
 }
 
 /**
@@ -940,6 +951,13 @@ export interface IDatabaseAdapter {
     }): Promise<Relationship | null>;
 
     getRelationships(params: { userId: UUID }): Promise<Relationship[]>;
+    getFormattedConversation(conversationId: UUID): Promise<string>;
+    getConversation(conversationId: UUID): Promise<Conversation | null>;
+    storeConversation(conversation: Conversation): Promise<void>;
+    updateConversation(conversation: Partial<Conversation> & { id: UUID }): Promise<void>;
+    getConversationsByStatus(status: 'ACTIVE' | 'CLOSED', limit?: number): Promise<Conversation[]>;
+    getConversationMessages(conversationId: UUID): Promise<Memory[]>;
+    setUserRapport(userId: UUID, agentId: UUID, score: number): Promise<void>;
+    getUserRapport(userId: UUID, agentId: UUID): Promise<number>;
 }
 
 export interface IDatabaseCacheAdapter {
@@ -1251,3 +1270,48 @@ export interface ActionResponse {
 export interface ISlackService extends Service {
     client: any;
 }
+
+export interface Conversation {
+    id: UUID;
+    rootTweetId?: string;
+    messageIds: string;
+    participantIds: string;
+    startedAt: Date;
+    lastMessageAt: Date;
+    context: string;
+    agentId: UUID;
+    status: 'ACTIVE' | 'CLOSED';
+}
+
+// Encode function
+export function encodeString(str: string): string {
+    return Buffer.from(str).toString('base64');
+}
+
+// Decode function
+export function decodeString(encoded: string): string {
+    return Buffer.from(encoded, 'base64').toString();
+}
+
+export enum RapportTier {
+    HOSTILE = "Make response very cold and hostile. Show strong distrust and negativity.",
+    ANTAGONISTIC = "Make response dismissive and unfriendly. Use stern and disapproving tone.",
+    UNFRIENDLY = "Make response slightly cold and distant. Show mild irritation and reluctance.",
+    NEUTRAL = "Make response professionally neutral. Maintain balanced and objective tone.",
+    ACQUAINTANCE = "Make response casually friendly. Show polite interest and openness.",
+    FRIEND = "Make response warm and engaging. Share enthusiasm and positive energy.",
+    CLOSE_FRIEND = "Make response very warm and supportive. Show genuine care and trust.",
+    FAMILY = "Make response deeply caring and protective. Express unconditional support and affection."
+}
+
+// Helper function to get tier from score
+export function getRapportTier(score: number): RapportTier {
+    if (score >= 300) return RapportTier.FAMILY;
+    if (score >= 100) return RapportTier.CLOSE_FRIEND;
+    if (score >= 50) return RapportTier.FRIEND;
+    if (score >= 25) return RapportTier.ACQUAINTANCE;
+    if (score >= 0) return RapportTier.NEUTRAL;
+    if (score >= -25) return RapportTier.UNFRIENDLY;
+    if (score >= -100) return RapportTier.ANTAGONISTIC;
+    return RapportTier.HOSTILE;
+}