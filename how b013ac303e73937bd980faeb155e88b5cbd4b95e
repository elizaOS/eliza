[33mcommit 1fe0d761fb49e87b3ba15caf99bb362c67488e01[m[33m ([m[1;31mfork/UserRapport[m[33m)[m
Author: nusk0 <guillaume1938@hotmail.com>
Date:   Tue Feb 11 22:34:33 2025 -0500

    fixed issue with actordata error in state

[1mdiff --git a/packages/core/src/runtime.ts b/packages/core/src/runtime.ts[m
[1mindex e3815ca61..717115854 100644[m
[1m--- a/packages/core/src/runtime.ts[m
[1m+++ b/packages/core/src/runtime.ts[m
[36m@@ -779,13 +779,37 @@[m [mexport class AgentRuntime implements IAgentRuntime {[m
         console.log("composing state, the user id is : ", userId)[m
         console.log("composing state, the room id is : ", roomId)[m
         const conversationLength = this.getConversationLength();[m
[31m-[m
[32m+[m[32m        console.log("1")[m
         const [actorsData, recentMessagesData, goalsData]: [[m
             Actor[],[m
             Memory[],[m
             Goal[],[m
         ] = await Promise.all([[m
[31m-            getActorDetails({ runtime: this, roomId }),[m
[32m+[m[32m            getActorDetails({ runtime: this, roomId }).then(actors => {[m
[32m+[m[32m                console.log("Actor details retrieved:", {[m
[32m+[m[32m                    roomId,[m
[32m+[m[32m                    actorCount: actors.length,[m
[32m+[m[32m                    actors: actors.map(a => ({id: a.id, username: a.username}))[m
[32m+[m[32m                });[m
[32m+[m[32m                if (!actors || actors.length === 0) {[m
[32m+[m[32m                    // This should never happen as we should at least have the message author[m
[32m+[m[32m                    console.error("No actors found for room:", roomId);[m
[32m+[m[32m                    console.error("Message details:", {[m
[32m+[m[32m                        messageId: message.id,[m
[32m+[m[32m                        userId: message.userId,[m
[32m+[m[32m                        roomId: message.roomId[m
[32m+[m[32m                    });[m
[32m+[m[41m                    [m
[32m+[m[32m                    // Emergency fallback: Create an actor from the message[m
[32m+[m[32m                    return [{[m
[32m+[m[32m                        id: message.userId,[m
[32m+[m[32m                        name: "Unknown User",[m
[32m+[m[32m                        username: "unknown",[m
[32m+[m[32m                        details: { tagline: "", summary: "", quote: "" }[m
[32m+[m[32m                    }];[m
[32m+[m[32m                }[m
[32m+[m[32m                return actors;[m
[32m+[m[32m            }),[m
             this.messageManager.getMemories({[m
                 roomId,[m
                 count: conversationLength,[m
[36m@@ -798,9 +822,9 @@[m [mexport class AgentRuntime implements IAgentRuntime {[m
                 roomId,[m
             }),[m
         ]);[m
[31m-[m
[32m+[m[32m        console.log("2")[m
         const goals = formatGoalsAsString({ goals: goalsData });[m
[31m-[m
[32m+[m[32m        console.log("3")[m
         const actors = formatActors({ actors: actorsData ?? [] });[m
 [m
         const recentMessages = formatMessages({[m
[36m@@ -945,12 +969,13 @@[m [mText: ${attachment.text}[m
                 : [];[m
 [m
         // Get formatted conversation if conversationId is provided[m
[32m+[m[32m        console.log("4")[m
         let recentUserConversations = "";[m
         if (additionalKeys.conversationId) {[m
             const currentConversationId = additionalKeys.conversationId as UUID;[m
             recentUserConversations = await this.databaseAdapter.getFormattedConversation(currentConversationId);[m
         }[m
[31m-[m
[32m+[m[32m        console.log("5")[m
         const getRecentMessageInteractions = async ([m
             recentInteractionsData: Memory[][m
         ): Promise<string> => {[m
[36m@@ -971,13 +996,13 @@[m [mText: ${attachment.text}[m
                     return `${sender}: ${message.content.text}`;[m
                 })[m
             );[m
[31m-[m
[32m+[m[32m            console.log("6")[m
             return formattedInteractions.join("\n");[m
         };[m
 [m
         const formattedMessageInteractions =[m
             await getRecentMessageInteractions(recentInteractions);[m
[31m-[m
[32m+[m[32m        console.log("7")[m
         const getRecentPostInteractions = async ([m
             recentInteractionsData: Memory[],[m
             actors: Actor[][m
[36m@@ -995,13 +1020,25 @@[m [mText: ${attachment.text}[m
             recentInteractions,[m
             actorsData[m
         );[m
[31m-[m
[32m+[m[32m        console.log("8")[m
         // Retrieve user rapport if message is from a user[m
[31m-        const userRapportScore = await this.databaseAdapter.getUserRapport(actorsData[0].id, this.agentId) || 0;[m
[31m-        const userRapportTier = getRapportTier(userRapportScore);[m
[32m+[m[32m        console.log("actorsData:", actorsData);[m
[32m+[m[32m        let userRapportScore = 0;[m
[32m+[m[32m        let userRapportTier = getRapportTier(0);  // Default to neutral[m
[32m+[m
[32m+[m[32m        if (actorsData && actorsData.length > 0 && actorsData[0]?.id) {[m
[32m+[m[32m            userRapportScore = await this.databaseAdapter.getUserRapport(actorsData[0].id, this.agentId) || 0;[m
[32m+[m[32m            userRapportTier = getRapportTier(userRapportScore);[m
[32m+[m[32m            console.log("Found user rapport for:", actorsData[0].id, "Score:", userRapportScore);[m
[32m+[m[32m        } else {[m
[32m+[m[32m            console.log("No valid actor data found for rapport calculation");[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        console.log("userRapportScore:", userRapportScore);[m
[32m+[m[32m        console.log("UserRapportTier:", userRapportTier);[m
 [m
         const getUserRapportDescription = (tier: RapportTier): string => {[m
[31m-            if(tier==RapportTier.NEUTRAL){[m
[32m+[m[32m            if(tier === RapportTier.NEUTRAL){[m
                 return '';[m
             }[m
             else{[m
[36m@@ -1009,15 +1046,14 @@[m [mText: ${attachment.text}[m
             }[m
         };[m
 [m
[31m-        [m
[31m-        const userRapportDescription = getUserRapportDescription( userRapportTier);[m
[32m+[m[32m        const userRapportDescription = getUserRapportDescription(userRapportTier);[m
         console.log("Building rapport context for user:", {[m
             userId: message.userId,[m
             score: userRapportScore,[m
             tier: userRapportTier,[m
             description: userRapportDescription,[m
         });[m
[31m-[m
[32m+[m[32m        console.log("11")[m
         // if bio is a string, use it. if its an array, pick one at random[m
         let bio = this.character.bio || "";[m
         if (Array.isArray(bio)) {[m
[36m@@ -1036,9 +1072,9 @@[m [mText: ${attachment.text}[m
                 .join(" ");[m
         }[m
         const knowledegeData = await knowledge.get(this, message);[m
[31m-[m
[32m+[m[32m        console.log("12")[m
         const formattedKnowledge = formatKnowledge(knowledegeData);[m
[31m-[m
[32m+[m[32m        console.log("13")[m[41m   [m
         const initialState = {[m
             agentId: this.agentId,[m
             agentName,[m
[36m@@ -1187,7 +1223,7 @@[m [mText: ${attachment.text}[m
             ...additionalKeys,[m
         [m
         } as State;[m
[31m-[m
[32m+[m[32m        console.log("14")[m
         const actionPromises = this.actions.map(async (action: Action) => {[m
             const result = await action.validate(this, message, initialState);[m
             if (result) {[m
[36m@@ -1195,7 +1231,7 @@[m [mText: ${attachment.text}[m
             }[m
             return null;[m
         });[m
[31m-[m
[32m+[m[32m        console.log("15")[m
         const evaluatorPromises = this.evaluators.map(async (evaluator) => {[m
             const result = await evaluator.validate([m
                 this,[m
[36m@@ -1207,7 +1243,7 @@[m [mText: ${attachment.text}[m
             }[m
             return null;[m
         });[m
[31m-[m
[32m+[m[32m        console.log("16")[m
         const [resolvedEvaluators, resolvedActions, providers] =[m
             await Promise.all([[m
                 Promise.all(evaluatorPromises),[m
[36m@@ -1255,7 +1291,7 @@[m [mText: ${attachment.text}[m
                 providers[m
             ),[m
         };[m
[31m-[m
[32m+[m[32m        console.log("17")[m
         return { ...initialState, ...actionState } as State;[m
     }[m
 [m
