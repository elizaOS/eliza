import { z } from "zod";
import { ETH_ADDRESS } from "./constants";

/* const PENDLE_RESPONSE = {
  method: 'swapExactTokenForPt',
  contractCallParamsName: ['receiver', 'market', 'minPtOut', 'guessPtOut', 'input', 'limit'],
  contractCallParams: [
    '0x463e3466f6c332959969a99811a7a95d080fe0b2',
    '0xb162b764044697cf03617c2efbcb1f42e31e4766',
    '116438381673992034',
    {
      guessMin: '58807263471713148',
      guessMax: '123495253290597611',
      guessOffchain: '117614526943426297',
      maxIteration: '30',
      eps: '1000000000000',
    },
    {
      tokenIn: '0x9d39a5de30e57443bff2a8307a4256c8797a3497',
      netTokenIn: '100000000000000000',
      tokenMintSy: '0x9d39a5de30e57443bff2a8307a4256c8797a3497',
      pendleSwap: '0x0000000000000000000000000000000000000000',
      swapData: {
        swapType: '0',
        extRouter: '0x0000000000000000000000000000000000000000',
        extCalldata: '',
        needScale: false,
      },
    },
    {
      limitRouter: '0x0000000000000000000000000000000000000000',
      epsSkipMarket: '0',
      normalFills: [],
      flashFills: [],
      optData: '0x',
    },
  ],
  tx: {
    data: '0xc81f847a000000000000000000000000463e3466f6c332959969a99811a7a95d080fe0b2000000000000000000000000b162b764044697cf03617c2efbcb1f42e31e4766000000000000000000000000000000000000000000000000019dac1759e64f6200000000000000000000000000000000000000000000000000d0ece50171bb7c00000000000000000000000000000000000000000000000001b6be474fd53ceb00000000000000000000000000000000000000000000000001a1d9ca02e376f9000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002800000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    to: '0x888888888889758F76e7103c6CbF23ABbF58F946',
    from: '0x463e3466f6c332959969a99811a7a95d080fe0b2',
  },
  tokenApprovals: [
    {
      token: '0x9d39a5de30e57443bff2a8307a4256c8797a3497',
      amount: '100000000000000000',
    },
  ],
  data: {
    amountOut: '117614526943426297',
    priceImpact: -0.00001037905379477496,
  },
}; */

const PendleSwapResponseSchema = z.object({
  method: z.string(),
  contractCallParamsName: z.array(z.string()),
  contractCallParams: z.array(z.any()),
  tx: z.object({
    data: z.string(),
    to: z.string(),
    from: z.string(),
    value: z.string().optional(),
  }),
  tokenApprovals: z.array(
    z.object({
      token: z.string(),
      amount: z.string(),
    })
  ),
  data: z.object({
    amountOut: z.string(),
    priceImpact: z.number(),
  }),
});

interface PendleSwapParams {
  chainId: `${number}`;
  market: `0x${string}`;
  receiver: `0x${string}`;
  slippage: `${number}`;
  enableAggregator: "true" | "false";
  tokenIn: `0x${string}`;
  tokenOut: `0x${string}`;
  amountIn: `${number}`;
}


export async function getPendleSwap({
  chainId,
  market,
  enableAggregator = "true",
  slippage = "0.01",
  ...params
}: PendleSwapParams) {
  const path = `/core/v1/sdk/${chainId}/markets/${market}/swap`;
  const query = new URLSearchParams({ ...params, enableAggregator, slippage });

  const response = await fetch(
    `https://api-v2.pendle.finance${path}?${query.toString()}`
  );

  const data = await response.json();
  const result = PendleSwapResponseSchema.safeParse(data);

  if (!result.success) {
    console.error("data received", data, "error", result.error);
    return;
  }

  return result.data;
}
